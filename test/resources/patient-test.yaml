terminology: true  

dictionary:
  - name: Patient
    file: test/resources/Patient1.json

  - name: FamilyDict
    file: test/resources/dictionary/color.json 

  - name: GivenDict
    file: test/resources/dictionary/names

  - name: CountryDict
    file: test/resources/dictionary/color.json 

  - name: CityDict
    file: test/resources/dictionary/color.json 

  - name: StateDict
    file: test/resources/dictionary/color.json 

  - name: DistrictDict 
    file: test/resources/dictionary/color.json 

  - name: LineDict 
    file: test/resources/dictionary/color.json 

  - name: CodeSystems
    query: |
      select cs.resource->>'name' as system, jsonb_agg(c.resource) as entry
      from concept c
      join codesystem as cs
      on cs.resource->>'url' = c.resource->>'system'
      group by cs.id

fns:
  - name: mkName 
    $fn: [s]
    $body: $ last (split(s, "/"))

  - name: cleanUpConcept
    $fn: [concept]
    $body:
      $map: $ concept
      $as: c
      $body:
        code: $ c.code
        display: $ c.display

  - name: saveFile 
    $fn: [sys, cnt]
    $body:
      $call: spit
      $args:
        - $ "/home/victor/Documents/Alkona/undefhir/resources/fhir-term/" + fns.mkName(toString(sys)) + ".yaml" 
        - $  fns.toYaml(fns.cleanUpConcept(cnt)) 
    
  - name: intoFiles
    $body:
      $map: $ fns.dict("CodeSystems") 
      $as: i 
      $body:
        $ fns.saveFile (i.system, i.entry)

  - name: testPatient
    $body:
      telecom: $ fns.randContactPoint(get(fns.dict("Patient"), "telecom"))
      address: $ fns.randAddress(get(fns.dict("Patient"), "address"))
      gender: $ fns.randCoding("AdministrativeGender").display 
      birthDate: $ fns.randDate("20.02.2017", "20.03.2019")

