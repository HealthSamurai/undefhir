dictionary:
  - name: Patient
    file: test/resources/Patient1.json

  - name: FamilyDict
    file: test/resources/dictionary/colors_ru.txt 

  - name: GivenDict
    file: test/resources/dictionary/animals_ru.txt

  - name: CountryDict
    file: test/resources/dictionary/color.json 

  - name: Patronymics
    file: test/resources/dictionary/patronymic 

  - name: CityDict
    file: test/resources/dictionary/color.json 

  - name: StateDict
    file: test/resources/dictionary/color.json 

  - name: DistrictDict 
    file: test/resources/dictionary/color.json 

  - name: LineDict 
    file: test/resources/dictionary/color.json 

  # - name: CodeSystems
  #   query: |
  #     select cs.resource->>'name' as system, jsonb_agg(c.resource) as entry
  #     from concept c
  #     join codesystem as cs
  #     on cs.resource->>'url' = c.resource->>'system'
  #     group by cs.id

  - name: chuvashiaAddresses
    file: test/resources/dictionary/ch_addreses.yaml

  # - name: TestPatient
  #   query: |
  #     select resource from tmp_patient limit 10;

  # - name: PipeConfig
  #   literal:
  #     writer:
  #       query: "select * from patient"
  #       db-spec:
  #         host: localhost
  #         port: 5441
  #         user: postgres
  #         database: undefhir
  #         password: postgres
  #     reader:
  #       query: "COPY patient (id, txid, status, resource) FROM STDIN csv quote e'\\x01' delimiter e'\\t'"
  #       db-spec: 
  #         host: localhost
  #         port: 5441
  #         user: postgres
  #         database: trytest 
  #         password: postgres

fns:
  - name: randAddress
    $fn: [address]
    $body:
      $if: $ address
      $then:
        $map: $ address
        $body: $ randNth(fns.dict("chuvashiaAddresses")) 
      $else:
        - $ randNth(fns.dict("chuvashiaAddresses"))

  - name: mkName 
    $fn: [s]
    $body: $ last (split(s, "/"))

  - name: cleanUpConcept
    $fn: [concept]
    $body:
      $map: $ concept
      $as: c
      $body:
        code: $ c.code
        display: $ c.display

  - name: saveFile 
    $fn: [sys, cnt]
    $body:
      $call: spit
      $args:
        - $ "/home/victor/Documents/Alkona/undefhir/resources/fhir-term/" + fns.mkName(toString(sys)) + ".yaml" 
        - $  fns.toYaml(fns.cleanUpConcept(cnt)) 
    
  - name: intoFiles
    $body:
      $map: $ fns.dict("CodeSystems") 
      $as: i 
      $body:
        $ fns.saveFile (i.system, i.entry)

  - name: randHumanName
    $fn: ["name"]
    $body: 
      $map: "$ name"
      $as: i
      $body: 
        family: $ randNth (fns.dict("FamilyDict")) 
        given:
            - $ randNth (fns.dict("GivenDict"))
            - $ randNth (fns.dict("Patronymics"))

  - name: transformPatient 
    $fn: ["Patient"]
    $body:
      telecom: $ fns.randContactPoint(Patient.resource.telecom)
      address: $ fns.randAddress(Patient.resource.address)
      name: $ fns.randHumanName(Patient.resource.name)

  - name: applyTransForm
    $body:
      $map: $ fns.dict("TestPatient")
      $as: i
      $body: $ merge(i.resource, fns.transformPatient(i))
