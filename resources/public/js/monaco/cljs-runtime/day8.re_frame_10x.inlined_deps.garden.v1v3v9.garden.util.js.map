{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/util.cljc"],"mappings":"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","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/format","seq58390","G__58391","cljs.core/first","cljs.core/next","self__4776__auto__","fmt","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","x__4487__auto__","m__4488__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/to-str","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/ToString","this","cljs.core/PROTOCOL_SENTINEL","goog.object/set","G__58400","G__58401","G__58402","G__58413","G__58414","G__58415","cljs.core/Keyword","cljs.core/name","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/as-str","seq58421","self__4777__auto__","cljs.core/seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.map.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/string->int","p__58424","vec__58425","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq58422","G__58423","s","radix","or__4185__auto__","js/parseInt","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/int->string","p__58432","vec__58433","seq58430","G__58431","i","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/space-join","xs","clojure.string.join.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/comma-join","ys","iter__4582__auto__","s__58441","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__58443","cljs.core/chunk-buffer","i__58442","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58440","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core/sequential?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/wrap-quotes","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/hash-map?","cljs.core/map?","cljs.core/record?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/rule?","cljs.core/vector?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/declaration?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/at-rule?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types/CSSAtRule","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/at-media?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/at-supports?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/at-keyframes?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/at-import?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/prefix","p","cljs.core/last","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/vendor-prefix","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/natural?","n","cljs.core/integer?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/between?","a","b","bottom","x__4276__auto__","y__4277__auto__","top","x__4273__auto__","y__4274__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/clip","vec__58466","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/average","seq58469","G__58471","G__58472","m","more","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/cartesian-product","seq58486","seqs","v-original-seqs","cljs.core/vec","step","v-seqs","increment","temp__5733__auto__","rst","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/every?","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-supports?\n  \"True if `x` is a CSS `@supports` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :feature)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s) \n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])] \n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n"]}