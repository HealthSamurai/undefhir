{"version":3,"sources":["rewrite_clj/node/quote.cljs"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k62526","else__4442__auto__","G__62534","cljs.core/Keyword","tag","prefix","sym","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__62538","vec__62539","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__62525","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__62546","coll__4436__auto__","cljs.core/hash-unordered-coll","this62527","other62528","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__62569","cljs.core/keyword-identical?","expr__62570","G__62572","G__62573","G__62576","G__62577","G__62579","G__62580","G__62581","G__62582","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.quote/QuoteNode","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__62529","extmap__4478__auto__","G__62600","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","rewrite-clj.node.quote/->QuoteNode","rewrite-clj.node.quote/map->QuoteNode","_","cljs.core/first","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.protocols/assert-single-sexpr","rewrite-clj.node.quote/->node","t","rewrite-clj.node.quote/quote-node","cljs.core/sequential?","rewrite-clj.node.quote/syntax-quote-node","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.quote/unquote-splicing-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.quote\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (list sym (first (node/sexprs children))))\n  (length [_]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_] children)\n  (replace-children [this children']\n    (node/assert-single-sexpr children')\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a syntax-quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing an unquoted form. (`~...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing an unquote-spliced form. (`~@...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n"]}