{"version":3,"sources":["rewrite_clj/node/fn.cljs"],"mappings":"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","names":["rewrite-clj.node.fn/construct-fn","syms","vararg","body","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.fn/sym-index","n","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/re-matches","js/parseInt","js/Error","rewrite-clj.node.fn/symbol->gensym","sym-seq","vararg?","max-n","sym","cljs.core/Symbol","nm","cljs.core/name","i","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/max","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.fn/fn-walk","form","iter__4582__auto__","s__62880","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__62882","cljs.core/chunk-buffer","i__62881","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62879","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range.cljs$core$IFn$_invoke$arity$0","base","s","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p1__62876#","clojure.walk/prewalk","or__4185__auto__","cljs.core/deref","cljs.core.take.cljs$core$IFn$_invoke$arity$2","this__4439__auto__","k__4440__auto__","this__4441__auto__","k62892","else__4442__auto__","G__62913","cljs.core/Keyword","children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__62915","vec__62916","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__62891","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","this__4435__auto__","h__4297__auto__","fexpr__62939","coll__4436__auto__","cljs.core/hash-unordered-coll","this62893","other62894","cljs.core/PROTOCOL_SENTINEL","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__62964","cljs.core/keyword-identical?","expr__62965","G__62968","G__62969","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-conj","rewrite-clj.node.fn/FnNode","this__4482__auto__","writer__4483__auto__","cljs.core/-write","G__62897","extmap__4478__auto__","G__63004","cljs.core/record?","rewrite-clj.node.fn/->FnNode","rewrite-clj.node.fn/map->FnNode","_","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.fn/fn-node","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.fn\n  (:require [rewrite-clj.node.protocols :as node]\n            [clojure.walk :as w]))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [syms vararg body]\n  (list\n    'fn*\n    (vec\n      (concat\n        syms\n        (if vararg\n          (list '& vararg))))\n    body))\n\n(defn- sym-index\n  \"Get index based on the substring following the parameter's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (js/parseInt n)\n        :else (throw (js/Error. \"arg literal must be %, %& or %integer.\"))))\n\n;; TODO: No promises available\n(defn- symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [sym-seq vararg? max-n sym]\n  (if (symbol? sym)\n    (let [nm (name sym)]\n      (if (= (.indexOf nm \"%\") 0)\n        (let [i (sym-index (subs nm 1))]\n;;           (if (and (= i 0) (not (realized? vararg?)))\n;;             (deliver vararg? true))\n          (swap! max-n max i)\n          (nth sym-seq i))))))\n\n;; TODO: No promises available\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [syms (for [i (range)\n                   :let [base (if (= i 0)\n                                \"rest__\"\n                                (str \"p\" i \"__\"))\n                         s (name (gensym base))]]\n               (symbol (str s \"#\")))\n        vararg? false ;(promise)\n        max-n (atom 0)\n        body (w/prewalk\n               #(or (symbol->gensym syms vararg? max-n %) %)\n               form)]\n    (construct-fn\n      (take @max-n (rest syms))\n      nil\n;;       (if (deref vararg? 0 nil)\n;;         (first syms))\n      body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_] :fn)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (fn-walk (node/sexprs children)))\n  (length [_]\n    (+ 3 (node/sum-lengths children)))\n  (string [_]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function.\"\n  [children]\n  (->FnNode children))\n"]}