{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/dom.cljs"],"mappings":";;;;;;;;;AASA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAmBC;;AAEnB,AAAA,AAAAR,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAG;AAAA;AAAA,AAAA,AAAmBC,AAAM,AAAA,AAACC;;AAE1B,AAAA,AAAOC,AAAcC;AAArB,AACE,AAACC,AAAMJ,AAAMK,AAAOF;;AACpB,AAACG,AAAiCH;;AAEpC,AAAA,AAAOI,AAAaC,AAAKL,AAAUM;AAAnC,AACE,AAAAC,AAAUE;AAAVD,AAAA;AAAA,AAAA,AAAAA,AAAUC;;AAAV,AAAA,AACE,AAAAC,AAAkB,AAACL,AAAAA,AAAAA;AAAnBM,AAAyBX;AAAzBY,AACE;AAAA,AACE,AAAAE,AAAUL;AAAVM,AAAA;AAAA,AAAA,AAAAA,AAAUN;;AAAV,AAAA,AACE,AAAA,AAACO,AAAMnB,AAAMoB,AAAMjB,AAAWK,AAAKL;;AACnC,AAACkB;;AACD,AAAI,AAAA,AAAA,AAAOZ;AACT,AAACA,AAAAA,AAAAA;;AADH;;AAHF,AAAA,AAAAQ,AAAUL;;AAFd,AAAA,AAAAC,AAAAC,AAAAC,AAACC;AADH,AAAA,AAAAN,AAAUE;;AASZ,AAAA,AAAOU,AAAqBd,AAAKL;AAAjC,AACE,AAAA,AAACI,AAAYC,AAAKL;;AAEpB,AAAA;;;;;;;;AAAA,AAAAoB,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAOFjB,AAAKL;AAPT,AAQG,AAAA,AAACwB,AAAOnB,AAAKL;;;AARhB,AAAA,AAAA,AAAMsB,AASFjB,AAAKL,AAAUM;AATnB,AAUG,AAACmB;;AACD,AAAMC,AAAE;AAAA,AACE,AAACC,AAAgB,AAAI,AAACC,AAAIvB,AAAM,AAACA,AAAAA,AAAAA,AAAMA;;AADjD,AAEE,AAACD,AAAYsB,AAAE1B,AAAUM;;;AAb9B,AAAA,AAAA,AAAMgB;;AAAN,AAeA,AAAA,AAAMO,AAA2B7B;AAAjC,AACE,AAACD,AAAaC;;AAEhB;;;AAAA,AAAM8B,AAEHC;AAFH,AAGE,AAACC,AAAsBD;;AAEzB,AAAME,AAAmBH;AAEzB;;;;;;;;;;;AAAA,AAAMI;AAAN,AAWE,AAACT;;AACD,AAAAU,AAAA,AAAAC,AAAU,AAAA,AAAAa,AAACC,AAAMrD;AAAjBwC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAACG,AAAMhC,AAAoB6B;;AAD7B;AAAA,AAAAb;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AAACG,AAAMhC,AAAoB6B;;AAD7B;AAAA,AAAA,AAAAD,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAZF","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom.imported","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/imported","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom.roots","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/render-comp","comp","callback","*always-update*-orig-val__60737","*always-update*-temp-val__60738","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util/*always-update*","G__60739","G__60740","G__60741","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__60742","*always-update*-temp-val__60743","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.batching/flush-after-render","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/re-render-component","var_args","G__60751","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/render","js/Error","day8.re_frame_10x.inlined_deps.reagent.v0v8v1.reagent.dom.render.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.ratom/flush!","f","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/as-element","cljs.core/fn?","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/unmount-component-at-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom/force-update-all","seq__60758","cljs.core/seq","chunk__60759","count__60760","i__60761","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom\n  (:require [react-dom :as react-dom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util :as util]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template :as tmpl]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug :refer-macros [dbg]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container [comp container])\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"]}