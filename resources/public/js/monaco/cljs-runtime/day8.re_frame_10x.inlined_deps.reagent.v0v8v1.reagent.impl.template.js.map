{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/impl/template.cljs"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/re-tag","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/NativeWrapper","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/->NativeWrapper","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/hiccup-tag?","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/valid-tag?","cljs.core/ifn?","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/prop-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/cache-get","o","k","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/cached-prop-name","temp__5737__auto__","k'","cljs.core/name","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util/dash-to-camel","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/js-val?","goog/typeOf","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/kv-conv","v","G__60625","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/custom-prop-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/cached-custom-prop-name","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/custom-kv-conv","G__60631","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/convert-custom-prop-value","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/oset","G__60642","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/oget","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/set-id-class","props","id-class","id","class","G__60643","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","old-class","p__60651","map__60652","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/stringify-class","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","c","clojure.string.join.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/convert-props","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template","js/day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template.find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/find-dom-node","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/these-inputs-have-selection-api","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__60658","map__60659","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.batching/do-after-render","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-handle-change","on-change","e","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-render-setup","jsprops","and__4174__auto__","js/Error","value","G__60677","p1__60672#","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-unmount","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-component?","G__60680","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/reagent-input-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/input-spec","argv","comp","first-child","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component/*current-component*","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/make-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/reagent-input","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component/create-class","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/parse-tag","hiccup-tag","vec__60686","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component/comp-name","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/try-get-key","e60694","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/get-key","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/key-from-vec","cljs.core/meta","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/reag-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component/as-class","temp__5739__auto__","key","js/module$node_modules$react$index.createElement","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/fragment-element","hasprops","js/module$node_modules$react$index.Fragment","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/adapt-react-class","G__60698","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/tag-name-cache","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/cached-parse","s","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/native-element","parsed","first","G__60702","cljs.core/with-meta","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/as-element","p","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util/fun-name","G__60704","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/hiccup-err","seq60708","G__60709","cljs.core/first","self__4776__auto__","msg","cljs.core/str","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/vec-to-elem","day8.re_frame_10x.inlined_deps.reagent.v0v8v1.reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keyword-identical?","pos","G__60710","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component/as-element","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/expand-seq","a","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4666__auto__","i","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template/expand-seq-dev","val","vec__60725","ctx","res","derefed","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.ratom/check-derefs","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug/has-console","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug/tracking","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug/track-console","js/console","G__60731","G__60732","G__60733","G__60734"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util :as util :refer [is-client]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component :as comp]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.batching :as batch]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.ratom :as ratom]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.interop :refer-macros [$ $!]]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset custom-prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" (if (named? old-class)\n                                                                  (name old-class)\n                                                                  old-class))))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (keep (fn [c]\n                 (if c\n                   (if (named? c)\n                     (name c)\n                     c))))\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          ;; TODO: Doesn't this match :>foo or any keyword starting with >\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}