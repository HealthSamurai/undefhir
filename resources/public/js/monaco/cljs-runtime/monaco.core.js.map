{"version":3,"sources":["monaco/core.cljs"],"mappings":"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","names":["monaco.core/monaco-editor","monaco.helpers.get.cljs$core$IFn$_invoke$arity$2","js/module$monaco","monaco.core/monaco-languages","monaco.core/create","dom-element","options","override","monaco.helpers.call.cljs$core$IFn$_invoke$arity$variadic","monaco.core/define-theme","theme-name","theme-data","monaco.core/focus","editor","monaco.helpers.call.cljs$core$IFn$_invoke$arity$2","monaco.core/set-model-language","model","language-id","monaco.core/set-theme","monaco.core/dispose","disposable","monaco.core/get-value","monaco.core/get-model","monaco.core/on-did-change-model","listener","monaco.core/on-did-change-model-content","monaco.core/layout","monaco.core/push-undo-stop","monaco.core/update-options","monaco.core/get-model-value","monaco.core/get-full-model-range","monaco.core/push-edit-operations","before-cursor-state","edit-operations","monaco.core/editor","config","*ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","assign-ref","component","cljs.core/reset!","editor-did-mount","this","props","reagent.core/props","temp__5739__auto__","f","monaco.helpers/set","event","G__70947","G__70948","editor-will-mount","_","or__4185__auto__","cljs.core/clj->js","component-did-mount","cljs.core/deref","ref","opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","component-did-update","old-argv","map__70959","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","old-props","cljs.core/second","model-value","value","theme","language","width","height","and__4174__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","component-will-unmount","sub","render","reagent.core/create-class"],"sourcesContent":["(ns monaco.core\n  (:require\n    [reagent.core :as r]\n    [monaco.helpers :as helpers]\n    [\"monaco\" :as monaco]))\n\n(def monaco-editor (helpers/get monaco \"editor\"))\n(def monaco-languages (helpers/get monaco \"languages\"))\n\n\n\n;;\n;; Monaco Editor\n;;\n\n(defn create [dom-element options override]\n  (helpers/call monaco-editor \"create\" dom-element options override))\n\n(defn define-theme [theme-name theme-data]\n  (helpers/call monaco-editor \"defineTheme\" theme-name theme-data))\n\n(defn focus [editor]\n  (helpers/call editor \"focus\"))\n\n(defn set-model-language [model language-id]\n  (helpers/call monaco-editor \"setModelLanguage\" model language-id))\n\n(defn set-theme [theme-name]\n  (helpers/call monaco-editor \"setTheme\" theme-name))\n\n\n\n;;\n;; IDisposable\n;;\n\n(defn dispose [disposable]\n  (helpers/call disposable \"dispose\"))\n\n\n\n;;\n;; IStandaloneCodeEditor\n;;\n\n(defn get-value [editor]\n  (helpers/call editor \"getValue\"))\n\n(defn get-model [editor]\n  (helpers/call editor \"getModel\"))\n\n(defn on-did-change-model [editor listener]\n  (helpers/call editor \"onDidChangeModel\" listener))\n\n(defn on-did-change-model-content [editor listener]\n  (helpers/call editor \"onDidChangeModelContent\" listener))\n\n(defn layout [editor]\n  (helpers/call editor \"layout\"))\n\n(defn push-undo-stop [editor]\n  (helpers/call editor \"pushUndoStop\"))\n\n(defn update-options [editor options]\n  (helpers/call editor \"updateOptions\" options))\n\n\n\n;;\n;; ITextModel\n;;\n\n(defn get-model-value [model]\n  (helpers/call model \"getValue\"))\n\n(defn get-full-model-range [model]\n  (helpers/call model \"getFullModelRange\"))\n\n(defn push-edit-operations [model before-cursor-state edit-operations]\n  (helpers/call model \"pushEditOperations\" before-cursor-state edit-operations))\n\n\n\n;;\n;; Components\n;;\n\n(defn editor [config]\n  (let [*ref                   (atom nil)\n\n        assign-ref             (fn [component]\n                                 (reset! *ref component))\n\n        editor-did-mount       (fn [this editor]\n                                 (let [props (r/props this)]\n                                   (when-some [f (:editorDidMount props)]\n                                     (f editor monaco))\n                                   (helpers/set this \"__subscription\"\n                                     (on-did-change-model-content editor\n                                       (fn [event]\n                                         (when-not (helpers/get this \"__preventTriggerChangeEvent\")\n                                           (when-some [f (:onChange props)]\n                                             (f (get-value editor) event))))))))\n\n        editor-will-mount      (fn [this _]\n                                 (let [props (r/props this)]\n                                   (when-some [f (:editorWillMount props)]\n                                     (or (f monaco) (clj->js {})))))\n\n        component-did-mount    (fn [this]\n                                 (when-some [ref @*ref]\n                                   (let [props  (r/props this)\n                                         opts   (-> config (merge props) (assoc :editorWillMount (partial editor-will-mount this)))\n                                         editor (create ref opts {})]\n                                     (helpers/set this \"editor\" editor)\n                                     (editor-did-mount this editor))))\n\n        component-did-update   (fn [this old-argv]\n                                 (let [editor      (helpers/get this \"editor\")\n                                       old-props   (second old-argv)\n                                       props       (r/props this)\n                                       model       (get-model editor)\n                                       model-value (get-model-value model)\n                                       {:keys [value theme language options width height]} props]\n\n                                   (when (and value (not= value model-value))\n                                     (helpers/set this \"__preventTriggerChangeEvent \" true)\n                                     (push-undo-stop editor)\n                                     (push-edit-operations model [] [{:text value, :range (get-full-model-range model)}])\n                                     (push-undo-stop editor)\n                                     (helpers/set this \"__preventTriggerChangeEvent \" false))\n\n                                   (when (not= language (:language old-props))\n                                     (set-model-language model language))\n\n                                   (when (not= theme (:theme old-props))\n                                     (set-theme theme))\n\n                                   (when (not= options (:options old-props))\n                                     (update-options editor options))\n\n                                   (when (or (not= width (:width old-props))\n                                           (not= height (:height old-props)))\n                                     (layout editor))))\n\n        component-will-unmount (fn [this]\n                                 (when-some [editor (helpers/get this \"editor\")]\n                                   (dispose editor)\n\n                                   (when-some [model (get-model editor)]\n                                     (dispose model)))\n\n                                 (when-some [sub (helpers/get this \"__subscription\")]\n                                   (dispose sub)))\n\n        render                 (fn [_]\n                                 [:div.monaco-editor-wrapper {:ref assign-ref}])]\n    (fn [_]\n      (r/create-class\n        {:display-name           \"monaco-editor\"\n         :component-did-mount    component-did-mount\n         :component-did-update   component-did-update\n         :component-will-unmount component-will-unmount\n         :render                 render}))))\n"]}