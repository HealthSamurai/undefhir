{"version":3,"sources":["day8/re_frame_10x/view/event.cljs"],"mappings":"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","names":["day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.common-styles/white-background-border-color","day8.re-frame-10x.view.event/event-styles","day8.re-frame-10x.common-styles/navbar-tint-lighter","day8.re-frame-10x.common-styles/navbar-text-color","day8.re-frame-10x.common-styles/gs-19","day8.re-frame-10x.common-styles/gs-12","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/hyperlink-href","day8.re-frame-10x.view.event/code-header","code-execution-id","line","cljs.core/deref","open?-path","G__66396","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe","max-column-width","G__66397","trace-id","open?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__66398","line-str","day8.re_frame_10x.utils.pretty_print_condensed.pr_str_truncated.cljs$core$IFn$_invoke$arity$variadic","=>str","result-length","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.utils.re-com/box","event","G__66399","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/dispatch","cljs.core/not","day8.re-frame-10x.utils.utils/copy-to-clipboard","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","G__66400","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.view.components/simple-render","G__66401","day8.re-frame-10x.view.event/find-bounds","form-str","search-str","re","cljs.core/re-pattern","js/goog.string.regExpEscape","result","index","pre-match","matched-form","cljs.core/count","start","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","length","day8.re-frame-10x.view.event/event-expression","scroll-pos","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core/create-class","this","node","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core/dom-node","cljs.core/reset!","vec__66408","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","highlighted-form","G__66411","G__66412","show-all-code?","G__66413","start-index","end-index","zprint.core/zprint-str","before","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","highlight","after","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.common-styles/white-background-color","G__66414","day8.re-frame-10x.view.components/highlight","day8.re-frame-10x.view.event/repl-msg-area","repl-msg-state","G__66421","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","G__66422","day8.re-frame-10x.view.event/repl-section","day8.re-frame-10x.utils.re-com/hyperlink","day8.re-frame-10x.common-styles/gs-7s","G__66423","day8.re-frame-10x.utils.re-com/hyperlink-info","day8.re-frame-10x.view.event/indent-block","indent-level","first?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__66432","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__66434","cljs.core/chunk-buffer","i__66433","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66431","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","num","cljs.core.range.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.common-styles/standard-background-color","day8.re-frame-10x.view.event/event-fragments","fragments","code-exec-id","code-open?","G__66451","max-frags","s__66453","b__66455","i__66454","iter__66452","frag","cljs.core.take.cljs$core$IFn$_invoke$arity$2","id","G__66463","G__66469","G__66464","G__66470","G__66465","G__66472","day8.re-frame-10x.utils.re-com/label","day8.re-frame-10x.common-styles/gs-5s","day8.re-frame-10x.view.event/event-code","code-traces","G__66482","code-execution","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","day8.re-frame-10x.view.event/render","epoch-id","G__66486","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/gap-f","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units :as units]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core :as reagent]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [day8.re-frame-10x.utils.utils :as utils])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :padding          [[0 common/gs-12]]\n     :overflow         \"hidden\"}]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"\n     :overflow-y       \"hidden\"}]])\n\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label \"Instructions for enabling Event Code Tracing\"\n               :attr {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  (let [open?-path       [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        max-column-width @(rf/subscribe [:code/max-column-width])\n        trace-id         code-execution-id\n        open?            (get-in @(rf/subscribe [:code/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width (:form line))\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))]\n    [rc/h-box\n     :class \"code-fragment__content\"\n     :size \"1\"\n     :align :center\n     :style {:border   code-border\n             :overflow \"hidden\"\n             :padding  \"0px 6px\"}\n     :children [[rc/box\n                 :width \"17px\"\n                 :height \"17px\"\n                 :class \"noselect\"\n                 :style {:cursor \"pointer\"\n                         :color  \"#b0b2b4\"}\n                 :attr {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child [rc/box\n                         :margin \"auto\"\n                         :child [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [rc/h-box\n                 :size \"1\"\n                 :style {:overflow \"hidden\"}\n                 :children [[rc/box\n                             :style {:margin-left \"2px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code line-str]]\n                            [rc/box\n                             :class \"code-fragment__result\"\n                             :style {:flex        \"1\"\n                                     :margin-left \"8px\"\n                                     :white-space \"nowrap\"}\n                             :child [:code =>str (when (pos? result-length)\n                                                   (pp/pr-str-truncated result-length (:result line)))]]]]\n                [rc/box\n                 :class \"code-fragment__button\"\n                 :attr {:title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n                        :on-click (handler-fn (do (utils/copy-to-clipboard (pr-str (list 'day8.re-frame-10x/traced-result trace-id (:id line))))\n                                                  (rf/dispatch [:code/repl-msg-state :start])))}\n                 :child \"repl\"]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  [rc/box\n   :size \"1\"\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str]\n  (let [re     (re-pattern (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" (goog.string.regExpEscape search-str) \")\"))\n        result (.exec re form-str)]\n    (if (some? result)\n      (let [index        (.-index result)\n            pre-match    (aget result 1)\n            matched-form (aget result 2)\n            index        (+ index (count pre-match))]\n        [index (+ index (count matched-form))])\n      ;; If the regex fails, fall back to string index just in case.\n      (let [start  (str/index-of form-str search-str)\n            length (if (and (some? search-str) (some? start))\n                     (count (pr-str search-str))\n                     0)]\n        [start (+ start length)]))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (reagent/create-class\n      {:component-will-update\n       (fn event-expression-component-will-update [this]\n         (let [node (reagent/dom-node this)]\n           (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (reagent/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               show-all-code?   @(rf/subscribe [:code/show-all-code?])\n               [start-index end-index] (find-bounds form-str (zp/zprint-str highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n           ^{:key (pr-str highlighted-form)}\n           [rc/box\n            :style {:max-height       (when-not show-all-code? (str (* 10 17) \"px\")) ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           code-border\n                    :background-color common/white-background-color}\n            :attr {:on-double-click (handler-fn (rf/dispatch [:code/set-show-all-code? (not show-all-code?)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn repl-msg-area\n  []\n  (let [repl-msg-state @(rf/subscribe [:code/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      ^{:key (gensym)}\n      [:div\n       {:style            {:opacity            \"0\"\n                           :color              \"white\"\n                           :background-color   \"green\"\n                           :padding            \"0px 4px\"\n                           :white-space        \"nowrap\"\n                           :overflow           \"hidden\"\n                           :animation-duration \"5000ms\"\n                           :margin-right       \"5px\"\n                           :animation-name     \"fade-clipboard-msg-re-frame-10x\"}\n        :on-animation-end #(rf/dispatch [:code/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into the REPL\"])))\n\n\n(defn repl-section\n  []\n  [rc/h-box\n   :height \"23px\"\n   :align :end\n   :style {:margin-bottom \"2px\"}\n   :children [[repl-msg-area]\n              [rc/box\n               :size \"1\"\n               :child \"\"]\n              [rc/hyperlink\n               :label \"repl requires\"\n               :style {:margin-right common/gs-7s}\n               :attr {:title \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"}\n               ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n               :on-click #(do (utils/copy-to-clipboard \"(require '[day8.re-frame-10x])\")\n                              (rf/dispatch [:code/repl-msg-state :start]))]\n              [rc/hyperlink-info \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]])\n\n\n(defn indent-block\n  [indent-level first?]\n  [rc/h-box\n   :children (doall\n               (for [num (range indent-level)]\n                 [rc/box\n                  :width \"12px\"\n                  :style {:background-color common/standard-background-color\n                          :border-top       (when first? code-border)\n                          :border-left      code-border}\n                  :child \"\"]))])\n\n\n(defn event-fragments\n  [fragments code-exec-id]\n  (let [code-open? @(rf/subscribe [:code/code-open?])\n        max-frags  50]\n    [rc/v-box\n     :size \"1\"\n     :style {:overflow-y \"auto\"}\n     :children [(doall\n                  (for [frag (take max-frags fragments)]\n                    (let [id     (:id frag)\n                          first? (zero? id)]\n                      ^{:key id}\n                      [rc/v-box\n                       :class \"code-fragment\"\n                       :style {:margin-top (when-not first? \"-1px\")}\n                       :attr {:on-mouse-enter (handler-fn (rf/dispatch [:code/hover-form (:form frag)]))\n                              :on-mouse-leave (handler-fn (rf/dispatch [:code/exit-hover-form (:form frag)]))}\n                       :children [[rc/h-box\n                                   :children [[indent-block (:indent-level frag) first?]\n                                              [code-header code-exec-id frag]]]\n                                  (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                    [rc/h-box\n                                     :children [[indent-block (:indent-level frag) false]\n                                                [code-block code-exec-id frag id]]])]])))\n                (when (> (count fragments) max-frags)\n                  [rc/label\n                   :style {:margin-top common/gs-5s\n                           :font-style \"italic\"}\n                   :label (str \"(only showing first \" max-frags \" of \" (count fragments) \" traces)\")])]]))\n\n\n(defn event-code\n  []\n  (let [code-traces    @(rf/subscribe [:code/current-code])\n        code-execution (first code-traces)                  ;; Ignore multiple code executions for now\n        #_#_debug? @(rf/subscribe [:settings/debug?])\n        #_#_highlighted-form (rf/subscribe [:code/highlighted-form])]\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (subs (pr-str @highlighted-form) 0 50) \"\\n\"])\n                  [event-expression]\n                  [repl-section]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:trace-id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-epoch-id])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size \"1\"\n     :class \"event-panel\"\n     :gap common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"]}