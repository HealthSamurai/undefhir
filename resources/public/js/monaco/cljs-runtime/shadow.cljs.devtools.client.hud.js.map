{"version":3,"sources":["shadow/cljs/devtools/client/hud.cljs"],"mappings":"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","names":["js/goog.define","shadow.cljs.devtools.client.hud/show-progress","shadow.cljs.devtools.client.hud/show-warnings","shadow.cljs.devtools.client.hud/show-errors","shadow.cljs.devtools.client.hud/open-file","file","line","column","js/console.log","req","shadow.xhr.chan.cljs$core$IFn$_invoke$arity$4","shadow.cljs.devtools.client.env/get-url-base","c__47540__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__47541__auto__","switch__47439__auto__","state_72235","state_val_72236","statearr-72248","cljs.core.async.impl.ioc-helpers/take!","inst_72188","inst_72198","inst_72199","cljs.core/not","statearr-72260","statearr-72261","statearr-72262","statearr-72268","inst_72203","inst_72205","inst_72206","inst_72207","cljs.core/PROTOCOL_SENTINEL","inst_72208","statearr-72274","statearr-72275","inst_72227","statearr-72277","statearr-72282","inst_72217","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","statearr-72283","inst_72189","statearr-72285","statearr-72286","statearr-72287","inst_72212","statearr-72288","statearr-72289","inst_72229","cljs.core.async.impl.ioc-helpers/return-chan","inst_72220","inst_72221","cljs.core.get.cljs$core$IFn$_invoke$arity$2","inst_72222","statearr-72291","statearr-72292","statearr-72293","inst_72225","statearr-72294","statearr-72295","inst_72215","statearr-72296","statearr-72297","statearr-72298","state-machine__47440__auto__","ret-value__47441__auto__","result__47442__auto__","cljs.core/keyword-identical?","e72299","js/Object","ex__47443__auto__","statearr-72300","cljs.core.async.impl.ioc-helpers/process-exception","state__47542__auto__","statearr-72301","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/console.warn","var_args","G__72303","shadow.cljs.devtools.client.hud/dom-insert","js/Error","node","shadow.cljs.devtools.client.hud.dom_insert.cljs$core$IFn$_invoke$arity$2","js/document.body","where","el","shadow.dom/dom-node","id","cljs.core/seq","temp__5739__auto__","x","shadow.dom.by_id.cljs$core$IFn$_invoke$arity$1","shadow.dom/remove","shadow.dom.append.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.hud/hud-id","shadow.cljs.devtools.client.hud/load-id","shadow.cljs.devtools.client.hud/logo-svg","cljs.core/Delay","s-path","shadow.dom.svg.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.hud/load-start","cljs.core/deref","shadow.cljs.devtools.client.hud.dom_insert.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.hud/load-end-success","container-el","shadow.animate/start","shadow.animate.transition.cljs$core$IFn$_invoke$arity$4","state_72316","state_val_72317","inst_72304","inst_72306","inst_72307","inst_72308","inst_72309","inst_72310","cljs.core/PersistentHashMap","inst_72311","statearr-72318","inst_72313","inst_72314","statearr-72319","statearr-72320","e72322","statearr-72323","statearr-72324","cljs.core.async/timeout","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-hide","d","shadow.cljs.devtools.client.hud/source-line-styles","shadow.cljs.devtools.client.hud/source-highlight-styles","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.hud/source-line-html","start-idx","lines","styles","iter__4582__auto__","s__72326","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__72328","cljs.core/chunk-buffer","i__72327","vec__72331","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__72325","cljs.core/chunk-rest","vec__72338","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","text","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","G__72334","G__72335","G__72336","G__72341","G__72342","G__72343","goog.string/format","shadow.cljs.devtools.client.hud/sep-length","G__72345","shadow.cljs.devtools.client.hud/sep-line","shadow.cljs.devtools.client.hud.sep_line.cljs$core$IFn$_invoke$arity$2","label","offset","sep-len","js/Math.max","len","sep","c","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p__72346","map__72347","shadow.cljs.devtools.client.hud/file-link","resource-name","warning","e","shadow.dom.ev_stop.cljs$core$IFn$_invoke$arity$1","p__72350","map__72351","shadow.cljs.devtools.client.hud/html-for-warning","msg","source-excerpt","map__72353","before","after","arrow-idx","or__4185__auto__","shadow.cljs.devtools.client.hud.sep_line.cljs$core$IFn$_invoke$arity$0","p__72358","map__72360","shadow.cljs.devtools.client.hud/hud-warnings","type","info","map__72368","sources","sources-with-warnings","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__72355#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","s__72371","xs__6292__auto__","map__72376","iterys__4578__auto__","s__72373","b__72375","i__72374","iter__72372","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__72370","warnings","p__72379","map__72380","shadow.cljs.devtools.client.hud/hud-error","report","shadow.cljs.devtools.client.hud/connection-error-id","shadow.cljs.devtools.client.hud/connection-error-clear!","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.hud/load-failure","error","task","remaining","js/console.error","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.cljs.devtools.client.hud\n  (:require\n    [shadow.dom :as dom]\n    [shadow.xhr :as xhr]\n    [shadow.animate :as anim]\n    [shadow.cljs.devtools.client.env :as env]\n    [cljs.core.async :as async :refer (go)]\n    [goog.string.format]\n    [goog.string :refer (format)]\n    [clojure.string :as str]))\n\n(goog-define show-progress true)\n\n(goog-define show-warnings true)\n\n(goog-define show-errors true)\n\n(defn open-file [file line column]\n  (js/console.log \"opening file\" file line column)\n\n  (let [req\n        (xhr/chan :POST\n          (str (env/get-url-base) \"/api/open-file\")\n          {:file file\n           :line line\n           :column column}\n          {:with-credentials false\n           :body-only true})]\n    (go (when-some [{:keys [exit] :as result} (<! req)]\n          (when-not (zero? exit)\n            (js/console.warn \"file open failed\" result))\n          ))))\n\n(defn dom-insert\n  ([node]\n   (dom-insert js/document.body node))\n  ([where node]\n   (let [el (dom/dom-node node)\n         id (.-id el)]\n     (assert (seq id))\n     (when-some [x (dom/by-id id)]\n       (dom/remove x))\n     (dom/append where el)\n     )))\n\n(def hud-id \"shadow-hud-container\")\n\n(def load-id \"shadow-hud-loading-container\")\n\n(def logo-svg\n  (delay\n    (let [s-path\n          \"M247.183941,141.416413 C247.183941,74.7839971 148.383423,78.9723529 148.383423,141.416413 C148.383423,203.860473 265.090698,171.864644 265.090698,248.900057 C265.090698,325.93547 135,325.851749 135,251.708304\"]\n      (dom/svg\n        {:id \"shadow-cljs-logo\"\n         :version \"1.1\"\n         :viewBox \"0 0 400 400\"\n         :style {:display \"block\"}\n         :height \"60px\"\n         :width \"60px\"}\n        [:title \"shadow-cljs\"]\n        [:defs\n         [:mask#shadow-cljs-logo-mask {:fill \"#fff\"}\n          [:circle {:r \"200\" :cy \"200\" :cx \"200\"}]]]\n        [:g\n         {:fill-rule \"evenodd\"\n          :fill \"none\"\n          :stroke-width \"0\"\n          :stroke \"none\"\n          :mask \"url(#shadow-cljs-logo-mask)\"}\n\n         [:g.circles\n          [:circle.blue {:r \"200\" :cy \"200\" :cx \"200\" :fill \"#4F80DF\"}]\n          [:circle.light-blue {:r \"71.5\" :cy \"200\" :cx \"370\" :fill \"#89B4FF\"}]\n          [:circle.dark-green {:r \"180\" :cy \"360\" :cx \"60\" :fill \"#40B400\"}]\n          [:circle.light-green {:r \"129\" :cy \"320\" :cx \"280\" :fill \"#76E013\"}]\n          [:animateTransform\n           {:attributeType \"xml\"\n            :attributeName \"transform\"\n            :type \"rotate\"\n            :from \"0 200 200\"\n            :to \"360 200 200\"\n            :dur \"3s\"\n            :repeatCount \"indefinite\"}]]\n\n         ;; S shadow\n         [:g {:transform \"translate(10,10)\"}\n          [:path\n           {:stroke-linecap \"square\"\n            :stroke-width \"16\"\n            :stroke \"#aaa\"\n            :d s-path}]]\n         ;; S\n         [:path\n          {:stroke-linecap \"square\"\n           :stroke-width \"16\"\n           :stroke \"#FFFFFF\"\n           :d s-path}]\n         ]))))\n\n(defn load-start []\n  (when show-progress\n    (dom-insert\n      [:div {:id load-id\n             :style {:position \"fixed\"\n                     :pointer-events \"none\"\n                     :left \"0px\"\n                     :bottom \"20px\"\n                     :z-index \"10000\"}}\n       [:div {:style {:background \"#eee\"\n                      :border-top-right-radius \"40px\"\n                      :border-bottom-right-radius \"40px\"\n                      :box-shadow \"2px 2px 10px #aaa\"\n                      :padding \"10px\"}}\n        @logo-svg]])))\n\n(defn load-end-success []\n  (when show-progress\n    (when-some [container-el (dom/by-id load-id)]\n      (let [el (.-firstChild container-el)]\n        (anim/start 500 {el (anim/transition :background \"#eee\" \"#40B400\" \"ease-out\")})\n        (go (<! (async/timeout 250))\n            (<! (anim/start 250 {el (anim/transition :opacity \"1\" \"0\" \"ease-in\")}))\n            (dom/remove container-el)\n\n            )))))\n\n(defn load-end []\n  (when-some [el (dom/by-id load-id)]\n    (dom/remove el)))\n\n(defn hud-hide []\n  (when-some [d (dom/by-id hud-id)]\n    (dom/remove d)))\n\n(def source-line-styles\n  {:padding \"0\"\n   :margin \"0\"})\n\n(def source-highlight-styles\n  (assoc source-line-styles\n    :font-weight \"bold\"))\n\n(defn source-line-html\n  [start-idx lines styles]\n  (->> (for [[idx text] (map-indexed vector lines)]\n         [:pre {:style styles} (format \"%4d | %s\" (+ 1 idx start-idx) text)])))\n\n(def sep-length 80)\n\n(defn sep-line\n  ([]\n   (sep-line \"\" 0))\n  ([label offset]\n   (let [sep-len (js/Math.max sep-length offset)\n         len (count label)\n\n         sep\n         (fn [c]\n           (->> (repeat c \"-\")\n                (str/join \"\")))]\n     (str (sep offset) label (sep (- sep-len (+ offset len)))))))\n\n(defn file-link [{:keys [resource-name file line column] :as warning}]\n  (if-not file\n    [:span resource-name]\n\n    [:span {:style {:text-decoration \"underline\"\n                    :color \"blue\"\n                    :cursor \"pointer\"}\n            :on {:click (fn [e]\n                          (dom/ev-stop e)\n                          (open-file file line column)\n                          )}}\n\n     resource-name]))\n\n(defn html-for-warning [{:keys [resource-name msg file line column source-excerpt] :as warning}]\n  [:div {:style {:border \"2px solid #ccc\"\n\n                 :margin-bottom \"10px\"}}\n\n   [:div {:style {:line-height \"16px\"\n                  :background-color \"#fadb64\"\n                  :padding \"10px\"\n                  :font-size \"1.2em\"\n                  :font-weight \"bold\"}}\n    [:span \"WARNING in \"]\n    (file-link warning)]\n\n   (when source-excerpt\n     (let [{:keys [start-idx before line after]} source-excerpt]\n       [:div {:style {:padding \"10px 10px\"\n                      :background-color \"#fff\"\n                      :border-top \"2px solid #ccc\"}}\n        (source-line-html start-idx before source-line-styles)\n        (source-line-html (+ start-idx (count before)) [line] source-highlight-styles)\n        (let [arrow-idx (+ 6 (or column 1))]\n          [:pre {:style source-highlight-styles} (sep-line \"^\" arrow-idx)])\n        [:div {:style {:font-weight \"bold\" :font-size \"1.2em\" :padding \"10px 0\"}} msg]\n        [:pre {:style source-highlight-styles} (sep-line)]\n        (source-line-html (+ start-idx (count before) 1) after source-line-styles)]\n       ))])\n\n(defn hud-warnings [{:keys [type info] :as msg}]\n  (let [{:keys [sources]}\n        info\n\n        sources-with-warnings\n        (->> sources\n             (remove :from-jar)\n             (filter #(seq (:warnings %)))\n             (into []))]\n\n    (when (seq sources-with-warnings)\n      ;; TODO: fancy transition from logo to warnings\n      (load-end)\n      (when show-warnings\n        (dom-insert\n          [:div\n           {:id hud-id\n            :style {:position \"fixed\"\n                    :z-index \"10000\"\n                    :left \"0px\"\n                    :bottom \"0px\"\n                    :right \"0px\"\n                    :display \"flex\"\n                    :flex-direction \"column\"\n                    :color \"#000\"\n                    :font-family \"monospace\"\n                    :font-size \"12px\"}}\n           [:div {:style {:align-self \"flex-end\"\n                          :background \"#fff\"\n                          :border \"2px solid #ccc\"\n                          :border-bottom \"0px\"\n                          :cursor \"pointer\"\n                          :padding \"6px\"\n                          :margin-bottom \"-2px\"\n                          :z-index \"10000\"}\n                  :on {:click hud-hide}}\n            \"Close\"]\n           [:div {:style {:background \"#fff\"\n                          :border-top \"2px solid #ccc\"\n                          :flex \"1\"\n                          :max-height \"300px\"\n                          :padding \"10px 10px 0\"\n                          :overflow \"auto\"}}\n            (for [{:keys [warnings]} sources-with-warnings\n                  warning warnings]\n              (html-for-warning warning))]])))))\n\n(defn hud-error [{:keys [report] :as msg}]\n  (when show-errors\n    (dom-insert\n      [:div\n       {:id hud-id\n        :style {:position \"fixed\"\n                :left \"0px\"\n                :top \"0px\"\n                :bottom \"0px\"\n                :right \"0px\"\n                :color \"#000\"\n                :background-color \"#fff\"\n                :border \"5px solid red\"\n                :z-index \"10000\"\n                :padding \"20px\"\n                :overflow \"auto\"\n                :font-family \"monospace\"\n                :font-size \"12px\"}}\n       [:div {:style \"color: red; margin-bottom: 10px; font-size: 2em;\"} \"Compilation failed!\"]\n       [:pre report]])))\n\n(def connection-error-id \"shadow-connection-error\")\n\n(defn connection-error-clear! []\n  (when-some [x (dom/by-id connection-error-id)]\n    (dom/remove x)))\n\n(defn connection-error [msg]\n  (when show-errors\n    (dom-insert\n      [:div {:id connection-error-id\n             :style {:position \"fixed\"\n                     :pointer-events \"none\"\n                     :left \"0px\"\n                     :bottom \"20px\"\n                     :z-index \"10000\"}}\n       [:div {:style {:background \"#c00\"\n                      :border-top-right-radius \"40px\"\n                      :border-bottom-right-radius \"40px\"\n                      :box-shadow \"2px 2px 10px #aaa\"\n                      :padding \"10px\"\n                      :font-family \"monospace\"\n                      :font-size \"14px\"\n                      :font-weight \"bold\"\n                      :color \"#fff\"}}\n        (str \"shadow-cljs - \" msg)\n        ]])))\n\n(defn load-failure [error task remaining]\n  (load-end)\n  (js/console.error \"reload-failed\" error)\n  (connection-error (str \"[reload failed] \" (.-message error))))"]}