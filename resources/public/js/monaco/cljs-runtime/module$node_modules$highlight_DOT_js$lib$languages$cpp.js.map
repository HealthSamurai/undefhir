{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$cpp.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/cpp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$cpp\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)'\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/, end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  'self',\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"]
}
