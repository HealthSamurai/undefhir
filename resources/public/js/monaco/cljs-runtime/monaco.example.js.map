{"version":3,"sources":["monaco/example.cljs"],"mappings":"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","names":["monaco.example/get-value","input","monaco.helpers.get_in.cljs$core$IFn$_invoke$arity$2","monaco.example/register!","monaco.monarch/register","monaco.monarch/set-monarch-tokens-provider","monaco.monarch/register-completion-item-provider","monaco.core/monaco-editor","monaco.core/define-theme","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","editor","monaco","monaco.core/focus","new-value","event","G__71355","re-frame.core/dispatch","G__71357","G__71358","re-frame.core/reg-sub","db","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.string/capitalize","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/val","G__71361","G__71362","G__71368","G__71369","G__71372","G__71373","G__71374","G__71375","G__71378","G__71379","G__71380","G__71381","p__71382","vec__71383","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","theme","cljs.core/assoc-in","p__71386","vec__71387","language","p__71391","vec__71392","value","monaco.example/select-theme","cljs.core/deref","G__71396","re-frame.core/subscribe","themes","G__71399","p1__71395#","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__71402","iter__4582__auto__","s__71404","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__71406","cljs.core/chunk-buffer","i__71405","vec__71409","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__71403","cljs.core/chunk-rest","vec__71414","cljs.core/first","cljs.core/cons","cljs.core/rest","v","monaco.example/select-language","G__71418","languages","G__71420","p1__71417#","G__71422","s__71426","b__71428","i__71427","vec__71434","iter__71425","vec__71439","monaco.example/config","monaco.example/header","monaco.example/root","monaco.core/editor","G__71454","monaco.example/mount-root","re-frame.core/clear-subscription-cache!","reagent.core.render.cljs$core$IFn$_invoke$arity$2","monaco.helpers.call.cljs$core$IFn$_invoke$arity$variadic","js/document","monaco.example/init","G__71461","re-frame.core/dispatch-sync","cljs.core/chunk-first"],"sourcesContent":["(ns monaco.example\n  (:require\n    [clojure.string :as str]\n    [reagent.core :as r]\n    [re-frame.core :as rf]\n    [monaco.core :as monaco]\n    [monaco.monarch :as monarch]\n    [monaco.helpers :as helpers]))\n\n;;\n;; Helper functions\n;;\n\n(defn get-value [input]\n  (helpers/get-in input [\"target\" \"value\"]))\n\n\n\n;;\n;; Custom language\n;;\n\n(defn register! []\n  (monarch/register {:id \"custom\"})\n\n  (monarch/set-monarch-tokens-provider \"custom\"\n    {:tokenizer {:root [[#\"\\[error.*\" \"custom-error\"]\n                        [#\"\\[notice.*\" \"custom-notice\"]\n                        [#\"\\[info.*\" \"custom-info\"]\n                        [#\"\\[[a-zA-Z 0-9:]+\\]\" \"custom-date\"]]}})\n\n  (monarch/register-completion-item-provider \"custom\"\n    {:provideCompletionItems (fn []\n                               {:suggestions [{:label      \"simpleText\"\n                                               :insertText \"simpleText\"\n                                               :kind       (helpers/get-in monaco/monaco-editor [\"CompletionItemKind\" \"Text\"])}\n                                              {:label           \"testing\"\n                                               :insertText      \"testing(${1:condition})\"\n                                               :insertTextRules (helpers/get-in monaco/monaco-editor [\"CompletionItemKind\" \"Keyword\"])\n                                               :kind            (helpers/get-in monaco/monaco-editor [\"CompletionItemInsertTextRule\" \"InsertAsSnippet\"])}]})})\n\n  (monaco/define-theme \"custom\"\n    {:base    \"vs\"\n     :inherit false\n     :rules   [{:token \"custom-info\" :foreground \"808080\"}\n               {:token \"custom-error\" :foreground \"ff0000\" :fontStyle \"bold\"}\n               {:token \"custom-notice\" :foreground \"ffa500\"}\n               {:token \"custom-date\" :foreground \"008800\"}]}))\n\n\n\n;;\n;; Events & subscriptions\n;;\n\n(rf/reg-event-db\n  ::init\n  (fn [_ _]\n    {:languages [\"clojure\" \"javascript\" \"custom\"]\n     :themes    {\"vs\"       \"Light\"\n                 \"vs-dark\"  \"Dark\"\n                 \"hc-black\" \"High Contrast\"\n                 \"custom\"   \"Custom\"}\n     :editor    {:width               \"100%\"\n                 :height              \"100%\"\n                 :value               \"[Sun Mar 7 16:02:00 2004] [notice] Apache/1.3.29 (Unix) configured -- resuming normal operations\\n[Sun Mar 7 16:02:00 2004] [info] Server built: Feb 27 2004 13:56:37\\n[Sun Mar 7 16:02:00 2004] [notice] Accept mutex: sysvsem (Default: sysvsem)\\n[Sun Mar 7 21:16:17 2004] [error] [client xx.xx.xx.xx] File does not exist: /home/httpd/twiki/view/Main/WebHome\"\n                 :defaultValue        \"\"\n                 :language            \"custom\"\n                 :theme               \"custom\"\n                 :minimap             {:enabled true}\n                 :autoIndent          true\n                 :selectOnLineNumbers true\n                 :roundedSelection    false\n                 :readOnly            false\n                 :cursorStyle         \"line\"\n                 :automaticLayout     false\n                 :editorDidMount      (fn [editor monaco] (monaco/focus editor))\n                 :editorWillMount     (fn [monaco])\n                 :onChange            (fn [new-value event] (rf/dispatch [::set-value new-value]))\n                 :overrideServices    {}}}))\n\n(rf/reg-sub\n  ::languages\n  (fn [db]\n    (->> db\n      :languages\n      (reduce\n        (fn [acc k]\n          (assoc acc k (str/capitalize k)))\n        {})\n      (sort-by val))))\n\n(rf/reg-sub\n  ::themes\n  (fn [db]\n    (sort-by val (:themes db))))\n\n(rf/reg-sub\n  ::editor\n  (fn [db]\n    (:editor db)))\n\n(rf/reg-sub\n  ::language\n  :<- [::editor]\n  (fn [editor]\n    (:language editor)))\n\n(rf/reg-sub\n  ::theme\n  :<- [::editor]\n  (fn [editor]\n    (:theme editor)))\n\n(rf/reg-event-db\n  ::set-theme\n  (fn [db [_ theme]]\n    (assoc-in db [:editor :theme] theme)))\n\n(rf/reg-event-db\n  ::set-language\n  (fn [db [_ language]]\n    (assoc-in db [:editor :language] language)))\n\n(rf/reg-event-db\n  ::set-value\n  (fn [db [_ value]]\n    (assoc-in db [:editor :value] value)))\n\n\n\n;;\n;; Components\n;;\n\n(defn select-theme []\n  (let [theme  @(rf/subscribe [::theme])\n        themes @(rf/subscribe [::themes])]\n    [:div.mr-2\n     [:span \"Theme:\"]\n     (into [:select.form-select.mt-1.block\n            {:value     theme\n             :on-change #(rf/dispatch [::set-theme (get-value %)])}]\n       (for [[k v] themes]\n         ^{:key k}\n         [:option {:value k} v]))]))\n\n(defn select-language []\n  (let [language  @(rf/subscribe [::language])\n        languages @(rf/subscribe [::languages])]\n    [:div.mr-2\n     [:span \"Language:\"]\n     (into [:select.form-select.mt-1.block\n            {:value     language\n             :on-change #(rf/dispatch [::set-language (get-value %)])}]\n       (for [[k v] languages]\n         ^{:key k}\n         [:option {:value k} v]))]))\n\n(defn config []\n  [:div.mt-6.mb-10.flex.flex-auto.w-full\n   [select-theme]\n   [select-language]])\n\n(defn header []\n  [:h1 \"Monaco Editor\"])\n\n(defn root []\n  [:div.m-6\n   [header]\n   [config]\n   [monaco/editor @(rf/subscribe [::editor])]])\n\n\n\n;;\n;; Application entry point\n;;\n\n(defn mount-root\n  \"Mount root component.\"\n  {:dev/after-load true}\n  []\n  (rf/clear-subscription-cache!)\n  (r/render [root]\n    (helpers/call js/document \"getElementById\" \"root\")))\n\n\n(defn init\n  \"Monaco UI initializer.\"\n  {:export true}\n  []\n  (register!)\n  (rf/dispatch-sync [::init])\n  (mount-root))\n"]}