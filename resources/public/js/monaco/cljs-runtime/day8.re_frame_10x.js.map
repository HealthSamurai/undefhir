{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;;AAAA,AAAAA,AAAA,AAAA,AAAaC;AAGb,AAAA,AAAMC,AAAsBC;AAA5B,AACE,AAAMC,AAAO,AAAAC,AAAQF;AAARE,AAAA,AAAA,AAAAA,AAAA,AAAA,AACQ,AAAAA,AAAA;AADR,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAEQ,AAAAA,AAAA;;;AACfC,AAAO,AAAAC,AAAQJ;AAAR,AAAA,AAAA,AAAAI,AAAA;AAAA;;AACQ,AAAAA,AAAA;;;AACfC,AAAO,AAAAC,AAAQH;AAARG,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AACQP,AAAAA,AAAAA;AADR,AAAA,AAAA,AAAAO,AAAA;AAAA;;AAEQ,AAAAA,AAAA;;;AACfC,AAAO,AAAKF,AAAKJ;AARvB,AASE,AAAU,AAACO,AAAOD;AAAlB;;AAAA,AAAuBA;;;AAE3B,AAAA,AAAME,AAAgBC;AAAtB,AAEE,AAAAC,AAAe,AAAAC,AAAQF;AAAR,AAAA,AAAA,AAAAE,AAAA;AAAA;;AAAU,AAAAA,AAAA;;;AAAzB,AAAA,AAAAD;AAAA,AAAAA,AAASX;AAAT,AACE,AAACD,AAAqBC;;AACtB,AAACa,AAAyBH;;;AAE9B,AAAA,AAAMI,AAAWJ;AAAjB,AACE,AAAMK,AAAE,AAAAC,AAAI,AAACP,AAAeC;AAApB,AAAA,AAAAM;AAAAA;;AACI,AAAAC,AAAQP;AAARO,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAAwBC;;;;AADpC,AAEE,AAAA,AAAQ,AAACV,AAAOO;AACdA;;AADF;;;AAIJ,AAAKI,AAAe,AAACC,AAAQ,AAAKC;AAAL,AAAgB,AAACC,AAAK,AAAA,AAACC,AAAU,AAACd,AAAeY;;AAE9E,AAAA,AAAA,AAAKG,AAEF;AAAA,AACE,AAAA,AAASd;AAAT,AACE,AAAA,AAAAe;AAAA,AAAAC,AAAAC;AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAC8B,AAAAlB,AAAc,AAACF,AAAeC;AAA9B,AAAA,AAAAC;AAAA,AAAAA,AAASN;AAAT,AAAA,AAAA,AACmBA;;AADnB;;AAD9B,AAI8B,AAACc,AAAAA,AAAAA,AAAeT,AAAAA;AAJ9C,AAAA,AAAAiB,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAKkB,AAAIU;AACF,AAACC,AAAiC7B;;AAClC,AAAM8B,AAAW,AAAA,AAAG9B;AACd+B,AAAW,AAACC,AAAoBhC;AAChCH,AAAW,AAAI,AAAA,AAAMiC,AACR,AAAA,AAACG;AAAD,AAAwB,AAACJ,AAAiC7B;AAA1D,AAA6DA,AACtCkC,AAAmBC,AAC1C,AAAA,AAAOL;AACpBM,AAAW,AAAA,AAAGpC;AANpB,AAOE,AAAA,AAAAe;AAAA,AAAA,AAAAsB,AAAA,AAAAC,AAAA,AAAAC,AAAAtB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAACE,AAAmBN,AACpB,AAAA,AAAMA,AACJ,AAACO,AAAID,AAAmB,AAAAE,AAASR;AAATS,AAAA;AAAAC,AAAA;AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAACU;AAHpD,AAAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAACC,AAAmBN,AACpB,AAAA,AAAA,AAAMA,AACJ,AAACO,AAAID,AAAmB,AAAAK,AAASX;AAATY,AAAA;AAAAC,AAAA;AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAACO;AAHpD,AAEyB;AAFzB,AAAA,AAAAvC,AAAAoB;;AAAA;AAAA;;AAIAxC;;AAlBtB,AAAA,AAAA,AAAAkB;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAD;;AAAA,AAKkB,AAAIY;AACF,AAACC,AAAiC7B;;AAClC,AAAM8B,AAAW,AAAA,AAAG9B;AACd+B,AAAW,AAACC,AAAoBhC;AAChCH,AAAW,AAAI,AAAA,AAAMiC,AACR,AAAA,AAACG;AAAD,AAAwB,AAACJ,AAAiC7B;AAA1D,AAA6DA,AACtCkC,AAAmBC,AAC1C,AAAA,AAAOL;AACpBM,AAAW,AAAA,AAAGpC;AANpB,AAOE,AAAA,AAAAe;AAAA,AAAA,AAAAsB,AAAA,AAAAC,AAAA,AAAAC,AAAAtB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAACE,AAAmBN,AACpB,AAAA,AAAMA,AACJ,AAACO,AAAID,AAAmB,AAAAQ,AAASd;AAATe,AAAA;AAAAC,AAAA;AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAACI;AAHpD,AAAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AACyB,AAACC,AAAmBN,AACpB,AAAA,AAAA,AAAMA,AACJ,AAACO,AAAID,AAAmB,AAAAW,AAASjB;AAATkB,AAAA;AAAAC,AAAA;AAAA,AAAA,AAAAF,AAAAC,AAAAC,AAACC;AAHpD,AAEyB;AAFzB,AAAA,AAAAvC,AAAAoB;;AAAA;AAAA;;AAIAxC;;;;AAG7B,AAAA,AAAA4D,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAoBC;;AAC7B,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAeC;;AACxB,AAAA,AAAAP,AAAAC,AAAAO;AAAA;AAAA,AAAA,AAASC,AAAcC;;AACvB,AAAA,AAAAV,AAAAC,AAAAU;AAAA;AAAA,AAAA,AAASC,AAAiC,AAAA,AAACC;;AAE3C,AAAA,AAAMC;AAAN,AACE,AAAA,AAaE,AAAMC,AAAkC1D;;AAExC,AAAM+C,AACA,AAAKY,AAAIC;AAAT,AACE,AAAAC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE;AAAA,AAAO,AAAA,AAAS3E;AAAT,AACE,AAAA,AAAAe;AAAA,AAAA8D,AAAA5D;AAAA6D,AAAA,AAAA3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BsD,AACA,AAAC7D,AAAK,AAAA,AAACC,AAAU,AAACT,AAAUJ,AACX,AAACD,AAAeC,AAChB,AAAC0C,AAAmB,AAAA,AAAG1C;AAHtE,AAAA,AAAAiB,AAAA6D;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/D;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAA4D;;AAAA,AAAA;;AAIA,AAAO,AAACjB,AAAAA,AAAAA,AAAoBa,AAAAA,AAAIC,AAAAA,AAAG1E,AAAEA;;;;;AAE9C,AAAC4D,AAAAA,AAAAA,AAAoBa,AAAAA,AAAIC,AAAAA;;;;;AAEnC,AAAMV,AACA,AAAKU;AAAL,AAgBE,AAAAK,AAAgB;AAAA,AACE,AAAA,AAAAhE;AAAA,AAAAiE,AAAA/D;AAAAgE,AAAA,AAAA9D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAgE;;AAAA,AAAA,AAAA,AAAA,AACkB,AAACP,AAAAA,AAAAA;;AACD,AAAA,AAAA3D;AAAA,AAAAmE,AAAAjE;AAAAkE,AAAA,AAAAhE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAkE;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAApE;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAiE;;AAAA,AAAA;;AACA,AAAM,AAAQ,AAAcI;AAA5B,AACE,AAAA,AAAAvE;AAAA,AAAAwE,AAAAtE;AAAAuE,AAAA,AAAArE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAuE;;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAzE;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAsE;;AAAA,AAAA;;;AADF;;AAHlB,AAAA,AAAA,AAAAxE;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAA+D;;AAAA,AACkB,AAACN,AAAAA,AAAAA;;AACD,AAAA,AAAA3D;AAAA,AAAAqE,AAAAnE;AAAAoE,AAAA,AAAAlE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAoE;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAtE;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAmE;;AAAA,AAAA;;AACA,AAAM,AAAQ,AAAcE;AAA5B,AACE,AAAA,AAAAvE;AAAA,AAAA0E,AAAAxE;AAAAyE,AAAA,AAAAvE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAF,AAAAyE;;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA3E;AAAA,AAAA,AAAAK,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAA,AAAAC,AAAAT,AAAA,AAAAK,AAAA,AAAA,AAAAD;;AAAA,AAAAM,AAAAP;;AAAA;AAAA,AAAA,AAAAH,AAAAwE;;AAAA,AAAA;;;AADF;;;;AAJpC,AAAA,AAAAV,AAAAA,AAAChB,AAAAA,AAAAA;;;AAmBb;;;AAAA,AAAM4B;AAAN,AAGE,AAACpB;;AAGH,AAAA,AAAMqB,AAAeC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAAA,AAAK,AAAG,AAAA,AAAGA;;AAExB,AAAA,AAAKC;AAEL,AAAA,AAAMC,AAAgBC;AAAtB,AAGE,AAAMC,AAAqB,AAAA,AAACC;AACtBC,AAAqB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACtBC,AAAqB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AACtBG,AAAqB,AAAA,AAACN;AACtBO,AAAqB,AAAA,AAACP;AACtBQ,AAAqB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACN,AAAAA,AAAAA;;AACtBO,AAAqB,AAACV,AAAOW;AAC7BC,AAAqB;AAAI,AAAAC,AAAA,AAAA,AAAqCF;AAArC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAAKC;AAAL,AAEE,AAAMC,AAAiBL;AAAvB,AACE,AAAAM,AAAA,AAAA,AAAqCD;AAArC,AAAA,AAAAC,AAAAA,AAACH,AAAAA,AAAAA;;AACD,AAACI,AAAOR,AAAaM;;;;AAClDG,AAAqB,AAAKJ;AAAL,AACE,AAAMK,AAAgB,AAAW,AAAUL;AACrCM,AAAgB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAyCF;AADhE,AAEE,AAAM,AAAA,AAAA,AAAA,AAAK,AAAKC,AACL,AAAA,AAACE,AAAE,AAAOR,AACV,AAAWA;AAFtB,AAGE,AAAAS,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACV,AAAAA,AAAAA;;AACD,AAAiBC;;AAJnB;;;AAKzBU,AAAqB,AAAKV;AAAL,AACE,AAAA,AAAAW,AAAOpB;AAAP,AACE,AAAMqB,AAAiB,AAAWZ;AAC5Ba,AAAiB,AAAWb;AAC5Bc,AAAiBlB;AAFvB,AAGE,AAAiBI;;AACjB,AAAMe,AAAO,AAAG,AAAGD,AAAiBF,AAAGE;AAAvC,AACE,AAAM,AAAA,AAAIC;AAAV,AACE,AAAAC,AAAA,AAAA,AAAqCD;AAArC,AAAA,AAAAC,AAAAA,AAACjB,AAAAA,AAAAA;;AADH;;AAEF,AAACI,AAAOR,AAAamB;;AARzB;;;AASvBG,AAAqB,AAAKjB;AAAL,AAAQ,AAAA,AAACG,AAAOZ;;AA/B3C,AAgCE,AAAA,AAAA,AAAC2B,AAC0B;AAAA,AACE,AAAA,AAACC,AAAqCf;;AACtC,AAAA,AAACe,AAAuCT;;AACxC,AAAA,AAACS,AAAqCF;;AACtC,AAAA,AAACE,AAAoCtB;AALlE,AAM2B;AAAA,AACE,AAAA,AAACuB,AAAwChB;;AACzC,AAAA,AAACgB,AAA0CV;;AAC3C,AAAA,AAACU,AAAwCH;;AACzC,AAAA,AAACG,AAAuCvB;AAVrE,AAAA,AAAA,AAY2B;AAAA,AACE,AAAA,AAAMjB;AACAyC,AAAe,AAAA,AAAAV,AAAKtB,AAAS,AAAA,AAAK,AAAA,AAAO,AAAA,AAAA,AAAAsB,AAAMzB,AAClB,AAAA,AAAAyB,AAAA,AAAMhB;AACnC2B,AAAe,AAAA,AAAAX,AAAA,AAAKpB,AAEHV;AALvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMG0C,AAQQC,AAEO,AAAA,AAAK,AAAA,AAAA,AAAAb,AAAQzB,AAMAmC,AAEAC,AACW,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOtB,AAAyB,AAACV,AAAcC;AAA/C,AACiC,AAAA,AAACuB,AAAOZ;AA1BnF,AAyB0C,AAEnBkC,AAAyB1C;;;AAGjF,AAAA,AAAM2C;AAAN,AACE,AAAA,AAAMC;AACAC,AAAM,AAAiBC,AAAYF;AADzC,AAEE,AAAIC;AACFA;;AACA,AAAME,AAAU,AAAA,AAAgBD;AAAhC,AACE,AAAA,AAAeC,AAAeH;;AAC9B,AAAc,AAAQE,AAAaC;;AACnC,AAACC,AAAgBD;;AACjBA;;;AAER,AAAA,AAAME;AAAN,AACE,AAACC,AAA2BJ;;AAC5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAUpD,AAC4B3G,AAAS,AAACuJ;;AAEnD,AAAA,AAAMS,AAAeC,AAASC;AAA9B,AAEE,AAAMC,AAAM,AAACC,AAAM,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACjC,AAAE4B,AAAS,AAAA,AAAAI;AAAS,AAAA,AAAA7B,AAAA,AAAA,AAAA,AAAC+B,AAAQC;AAA1D,AACE,AAAA,AAAA,AAAA,AAAA,AAACD,AAAOJ,AAAmBD;;AAE/B,AAAA,AAAMO;AAAN,AACE,AAACC,AAAiB1K;;AAEpB,AAAA,AAAe2K;AAAf,AACE,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChD,AAAAA,AAAAA;;;AAEH,AAAA,AAAeiD,AAAaC;AAA5B,AACE,AAAAC,AAAA,AAAA,AAAoCD;AAApC,AAAA,AAAAC,AAAAA,AAACnD,AAAAA,AAAAA","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/fiber-component-path","fiber","name","G__68071","parent","G__68074","path","G__68075","res","cljs.core/empty?","day8.re-frame-10x/component-path","c","temp__5733__auto__","G__68085","reagent.impl.component/component-path","day8.re-frame-10x/comp-name","n","or__4185__auto__","G__68087","reagent.impl.util/fun-name","day8.re-frame-10x/operation-name","cljs.core/memoize","component","cljs.core/last","clojure.string.split.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__68098","re-frame.trace/*current-trace*","*current-trace*-temp-val__68100","re-frame.trace/start-trace","end__66139__auto__","re-frame.interop/now","duration__66140__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","_","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__66141__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interop/reagent-id","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__68106","G__68107","G__68108","G__68109","G__68110","G__68111","G__68119","G__68120","G__68121","G__68122","G__68123","G__68124","goog.object/get","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.real-custom-wrapper","day8.re-frame-10x/real-custom-wrapper","reagent.impl.component/custom-wrapper","js/day8.re-frame-10x.real-next-tick","day8.re-frame-10x/real-next-tick","reagent.impl.batching/next-tick","js/day8.re-frame-10x.real-schedule","day8.re-frame-10x/real-schedule","reagent.impl.batching/schedule","js/day8.re-frame-10x.do-after-render-trace-scheduled?","day8.re-frame-10x/do-after-render-trace-scheduled?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x/monkey-patch-reagent","reagent.impl.component/static-fns","key","f","G__68146","cljs.core/Keyword","*current-trace*-orig-val__68151","*current-trace*-temp-val__68152","G__68157","*current-trace*-orig-val__68158","*current-trace*-temp-val__68159","*current-trace*-orig-val__68164","*current-trace*-temp-val__68165","*current-trace*-orig-val__68177","*current-trace*-temp-val__68178","reagent.impl.batching/render-queue","*current-trace*-orig-val__68170","*current-trace*-temp-val__68171","*current-trace*-orig-val__68184","*current-trace*-temp-val__68185","day8.re-frame-10x/init-tracing!","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","position","day8.re_frame_10x.inlined_deps.reagent.v0v8v1.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","panel-width%","G__68211","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe","showing?","G__68212","dragging?","pin-to-bottom?","selected-tab","G__68217","window-width","js/window.innerWidth","handle-window-resize","G__68219","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/dispatch","e","window-width-val","G__68225","cljs.core/reset!","handle-keys","tag-name","entering-input?","cljs.core/contains?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__68237","handle-mousemove","cljs.core/deref","x","y","new-window-width","width%","G__68242","handle-mouse-up","day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core/create-class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.utils.re-com/box","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.view.container/devtools-inner","day8.re-frame-10x/panel-div","id","panel","js/document","new-panel","js/window.focus","day8.re-frame-10x/inject-devtools!","day8.re-frame-10x.styles/inject-trace-styles","day8.re_frame_10x.inlined_deps.reagent.v0v8v1.reagent.core.render.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__68252#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.db/app-db","day8.re-frame-10x/init-db!","day8.re-frame-10x.db/init-db","day8.re-frame-10x/factory-reset!","G__68255","day8.re-frame-10x/show-panel!","show-panel?","G__68256"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.styles :as styles]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.subs]\n            [day8.re-frame-10x.events]\n            [day8.re-frame-10x.db :as trace.db]\n            [re-frame.trace :as trace :include-macros true]\n            [clojure.string :as str]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :as util]\n            [reagent.impl.component :as component]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [goog.object :as gob]\n            [re-frame.interop :as interop]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core :as r]))\n\n(goog-define debug? false)\n\n;; from https://github.com/reagent-project/reagent/blob/3fd0f1b1d8f43dbf169d136f0f905030d7e093bd/src/reagent/impl/component.cljs#L274\n(defn fiber-component-path [fiber]\n  (let [name   (some-> fiber\n                       ($ :type)\n                       ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path   (some-> parent\n                       fiber-component-path\n                       (str \" > \"))\n        res    (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (component/component-path c)))\n\n(defn comp-name [c]\n  (let [n (or (component-path c)\n              (some-> c .-constructor util/fun-name))]\n    (if-not (empty? n)\n      n\n      \"\")))\n\n(def operation-name (memoize (fn [component] (last (str/split (component-path component) #\" > \")))))\n\n(def static-fns\n  {:render\n   (fn mp-render []                                         ;; Monkeypatched render\n     (this-as c\n       (trace/with-trace {:op-type   :render\n                          :tags      (if-let [path (component-path c)]\n                                       {:component-path path}\n                                       {})\n                          :operation (operation-name c)}\n                         (if util/*non-reactive*\n                           (reagent.impl.component/do-render c)\n                           (let [rat        ($ c :cljsRatom)\n                                 _          (batch/mark-rendered c)\n                                 res        (if (nil? rat)\n                                              (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                                     batch/queue-render reagent.impl.component/rat-opts)\n                                              (._run rat false))\n                                 cljs-ratom ($ c :cljsRatom)] ;; actually a reaction\n                             (trace/merge-trace!\n                               {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                                       :input-signals (when cljs-ratom\n                                                        (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n                             res)))))})\n\n\n(defonce real-custom-wrapper reagent.impl.component/custom-wrapper)\n(defonce real-next-tick reagent.impl.batching/next-tick)\n(defonce real-schedule reagent.impl.batching/schedule)\n(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn monkey-patch-reagent []\n  (let [#_#_real-renderer reagent.impl.component/do-render]\n\n\n\n    #_(set! reagent.impl.component/do-render\n            (fn [c]\n              (let [name (comp-name c)]\n                (js/console.log c)\n                (trace/with-trace {:op-type   :render\n                                   :tags      {:component-path (component-path c)}\n                                   :operation (last (str/split name #\" > \"))}\n                                  (real-renderer c)))))\n\n    (set! reagent.impl.component/static-fns static-fns)\n\n    (set! reagent.impl.component/custom-wrapper\n          (fn [key f]\n            (case key\n              :componentWillUnmount\n              (fn [] (this-as c\n                       (trace/with-trace {:op-type   key\n                                          :operation (last (str/split (comp-name c) #\" > \"))\n                                          :tags      {:component-path (component-path c)\n                                                      :reaction       (interop/reagent-id ($ c :cljsRatom))}})\n                       (.call (real-custom-wrapper key f) c c)))\n\n              (real-custom-wrapper key f))))\n\n    (set! reagent.impl.batching/next-tick\n          (fn [f]\n            ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n            ;; This signals the end of the epoch.\n\n            #_(swap! do-after-render-trace-scheduled?\n                     (fn [scheduled?]\n                       (js/console.log \"Setting up scheduled after\" scheduled?)\n                       (if scheduled?\n                         scheduled?\n                         (do (reagent.impl.batching/do-after-render ;; a do-after-flush would probably be a better spot to put this if it existed.\n                               (fn []\n                                 (js/console.log \"Do after render\" reagent.impl.batching/render-queue)\n                                 (reset! do-after-render-trace-scheduled? false)\n                                 (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                   (trace/with-trace {:op-type :reagent/quiescent}))))\n                             true))))\n            (real-next-tick (fn []\n                              (trace/with-trace {:op-type :raf}\n                                                (f)\n                                                (trace/with-trace {:op-type :raf-end})\n                                                (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                                  (trace/with-trace {:op-type :reagent/quiescent})))))))\n\n\n\n    #_(set! reagent.impl.batching/schedule\n            (fn []\n              (reagent.impl.batching/do-after-render\n                (fn []\n                  (when @do-after-render-trace-scheduled?\n                    (trace/with-trace {:op-type :do-after-render})\n                    (reset! do-after-render-trace-scheduled? false))))\n              (real-schedule)))))\n\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (monkey-patch-reagent))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (do (rf/dispatch [:settings/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [e]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [:settings/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [tag-name        (.-tagName (.-target e))\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?)\n                                            (= (.-key e) \"h\")\n                                            (.-ctrlKey e))\n                                   (rf/dispatch [:settings/user-toggle-panel])\n                                   (.preventDefault e))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (let [width% (/ (- new-window-width x) new-window-width)]\n                                     (when (<= width% 0.9)\n                                       (rf/dispatch [:settings/panel-width% width%])))\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [rc/box\n                                    :class \"panel-wrapper\"\n                                    :width \"0px\"\n                                    :height \"0px\"\n                                    :style {:position \"fixed\"\n                                            :top      \"0px\"\n                                            :left     \"0px\"\n                                            :z-index  99999999}\n                                    :child [rc/h-box\n                                            :class \"panel\"\n                                            :width (str (* 100 @panel-width%) \"%\")\n                                            :height \"100%\"\n                                            :style {:position   \"fixed\"\n                                                    :z-index    1\n                                                    :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\"\n                                                    :background \"white\"\n                                                    :left       left\n                                                    :top        \"0px\"\n                                                    :transition transition}\n                                            :children [[:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                                            :on-mouse-down #(reset! dragging? true)})]\n                                                       [container/devtools-inner opts]]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-10x--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (r/render [devtools-outer {:panel-type :inline\n                             :debug?     debug?}] (panel-div)))\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.db/app-db [:traces :all-traces])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n\n(defn ^:export show-panel! [show-panel?]\n  (rf/dispatch [:settings/show-panel? show-panel?]))\n"]}