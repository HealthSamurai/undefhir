{"version":3,"sources":["rewrite_clj/node/comment.cljs"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k62408","else__4442__auto__","G__62413","cljs.core/Keyword","s","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__62417","vec__62421","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__62407","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__62435","coll__4436__auto__","cljs.core/hash-unordered-coll","this62409","other62410","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__62450","cljs.core/keyword-identical?","expr__62451","G__62453","G__62454","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","rewrite-clj.node.comment/CommentNode","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__62411","extmap__4478__auto__","G__62467","cljs.core/record?","rewrite-clj.node.comment/->CommentNode","rewrite-clj.node.comment/map->CommentNode","_","js/Error","this","rewrite-clj.node.comment/comment-node","rewrite-clj.node.comment/comment?","node","rewrite-clj.node.protocols/tag"],"sourcesContent":["(ns rewrite-clj.node.comment\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord CommentNode [s]\n  node/Node\n  (tag [_] :comment)\n  (printable-only? [_] true)\n  (sexpr [_]\n    (throw (js/Error. \"Unsupported operation\")))\n  (length [_]\n    (+ 1 (count s)))\n  (string [_]\n    (str \";\" s))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;;(node/make-printable! CommentNode)\n\n;; ## Constructor\n\n(defn comment-node\n  \"Create node representing an EDN comment.\"\n  [s]\n  (->CommentNode s))\n\n(defn comment?\n  \"Check whether a node represents a comment.\"\n  [node]\n  (= (node/tag node) :comment))\n\n\n\n"]}