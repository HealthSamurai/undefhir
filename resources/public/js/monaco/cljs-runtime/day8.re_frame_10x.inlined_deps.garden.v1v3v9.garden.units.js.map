{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/units.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/length-units","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/angular-units","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/time-units","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/frequency-units","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/resolution-units","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/unit?","x","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types/CSSUnit","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/length?","cljs.core/contains?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/angle?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/time?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/frequency?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/resolution?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/conversions","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/convertable?","unit","p__59924","map__59925","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/convert","m","left","right","cljs.core/every?","v1","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","v2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.format.cljs$core$IFn$_invoke$arity$variadic","cljs.core/name","cljs.core/first","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/unit-re","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/read-unit","s","temp__5735__auto__","vec__59927","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","magnitude","cljs.core/re-matches","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-predicate","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-fn","ex-message","cljs.core/type","ex-data","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-adder","u","y","map__59935","map__59936","m1","m2","G__59939","more","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","u+","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$units$make_unit_adder_$_u_PLUS_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-subtractor","G__59945","map__59946","map__59947","G__59950","u-","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$units$make_unit_subtractor_$_u_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-multiplier","op","cljs.core/*","map__59951","map__59952","G__59955","u*","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$units$make_unit_multiplier_$_u_STAR_.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/make-unit-divider","cljs.core//","G__59960","map__59961","map__59962","G__59968","ud","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$units$make_unit_divider_$_ud.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/cm","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/mm","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/in","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/px","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pt","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/pc","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/percent","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/em","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ch","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rem","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vw","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vh","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmin","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/vmax","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/deg","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/grad","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/rad","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/turn","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/s","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/ms","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/Hz","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/kHz","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpi","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dpcm","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx*","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units/dppx"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units\n  \"Functions and macros for working with CSS units.\"\n  (:refer-clojure :exclude [rem])\n  #?@(:clj\n     [(:require\n       [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types :as types]\n       [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util :as util])\n      (:import\n       [day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.types CSSUnit])])\n  #?@(:cljs\n      [(:require\n        [cljs.reader :refer [read-string]]\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types :as types :refer [CSSUnit]]\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util :as util])\n       (:require-macros\n        [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.units :refer [defunit]])]))\n\n;;;; ## Unit families\n\n(def length-units\n  #{:in :cm :pc :mm :pt :px (keyword \"%\")})\n\n(def angular-units\n  #{:deg :grad :rad :turn})\n\n(def time-units\n  #{:s :ms})\n\n(def frequency-units\n  #{:Hz :kHz})\n\n(def resolution-units\n  #{:dpi :dpcm :dppx})\n\n;;;; ## Unit predicates\n\n(defn unit?\n  \"True if x is of type CSSUnit.\"\n  [x]\n  (instance? CSSUnit x))\n\n(defn length?\n  [x]\n  (and (unit? x)\n       (contains? length-units (:unit x))))\n\n(defn angle?\n  [x]\n  (and (unit? x)\n       (contains? angular-units (:unit x))))\n\n(defn time?\n  [x]\n  (and (unit? x)\n       (contains? time-units (:unit x))))\n\n(defn frequency?\n  [x]\n  (and (unit? x)\n       (contains? frequency-units (:unit x))))\n\n(defn resolution?\n  [x]\n  (and (unit? x)\n       (contains? resolution-units (:unit x))))\n\n;;;; ## Unit conversion\n\n(def ^{:private true\n       :doc \"Map associating CSS unit types to their conversion values.\"}\n  conversions\n  {;; Absolute units\n   :cm {:cm 1\n        :mm 10\n        :pc 2.36220473\n        :pt 28.3464567\n        :px 37.795275591}\n   :in {:cm 2.54\n        :in 1\n        :mm 25.4\n        :pc 6\n        :pt 72\n        :px 96}\n   :mm {:mm 1\n        :pt 2.83464567\n        :px 3.7795275591}\n   :pc {:mm 4.23333333\n        :pc 1\n        :pt 12\n        :px 16}\n   :pt {:pt 1\n        :px 1.3333333333}\n   :px {:px 1}\n   (keyword \"%\") {(keyword \"%\") 1}\n\n   ;; Relative untis\n   :em {:em 1}\n   :rem {:rem 1}\n\n   ;; Angular units\n   :deg {:deg 1\n         :grad 1.111111111\n         :rad 0.0174532925\n         :turn 0.002777778}\n   :grad {:grad 1\n          :rad 63.661977237\n          :turn 0.0025}\n   :rad {:rad 1\n         :turn 0.159154943}\n   :turn {:turn 1}\n\n   ;; Time units\n   :s {:ms 1000\n       :s 1}\n   :ms {:ms 1}\n\n   ;; Frequency units\n   :Hz {:Hz 1\n        :kHz 0.001}\n   :kHz {:kHz 1}})\n\n(defn- convertable?\n  \"True if unit is a key of convertable-units, false otherwise.\"\n  [unit]\n  (contains? conversions unit))\n\n(defn- convert\n  \"Convert a Unit with :unit left to a Unit with :unit right if possible.\"\n  [{m :magnitude left :unit} right]\n  (if (every? convertable? [left right])\n    (let [v1 (get-in conversions [left right])\n          v2 (get-in conversions [right left])]\n      (cond\n        v1\n        (CSSUnit. right (* v1 m))\n\n        v2\n        (CSSUnit. right (/ m v2))\n\n       ;; Both units are convertible but no conversion between them exists.\n       :else\n       (throw\n        (ex-info\n         (util/format \"Can't convert %s to %s\" (name left) (name right)) {}))))\n    ;; Display the inconvertible unit.\n    (let [x (first (drop-while convertable? [left right]))]\n      (throw (ex-info (str \"Inconvertible unit \" (name x)) {})))))\n\n;;;; ## Unit helpers\n\n(def ^{:doc \"Regular expression for matching a CSS unit. The magnitude\n             and unit are captured.\"\n       :private true}\n  unit-re\n  #\"([+-]?\\d+(?:\\.?\\d+)?)(p[xtc]|in|[cm]m|%|r?em|ex|ch|v(?:[wh]|m(?:in|ax))|deg|g?rad|turn|m?s|k?Hz|dp(?:i|cm|px))\")\n\n(defn read-unit\n  \"Read a `CSSUnit` object from the string `s`.\"\n  [s]\n  (when-let [[_ magnitude unit] (re-matches unit-re s)]\n    (let [unit (keyword unit)\n          magnitude (if magnitude (read-string magnitude) 0)]\n      (CSSUnit. unit magnitude))))\n\n(defn make-unit-predicate\n  \"Creates a function for verifying the given unit type.\"\n  [unit]\n  (fn [x] (and (unit? x) (= (:unit x) unit))))\n\n(defn make-unit-fn\n  \"Creates a function for creating and converting `CSSUnit`s for the\n  given unit. If a number n is passed the function it will produce a\n  new `CSSUnit` record with a the magnitude set to n. If a `CSSUnit`\n  is passed the function will attempt to convert it.\"\n  [unit]\n  (fn [x]\n    (cond\n      (number? x)\n      (CSSUnit. unit x)\n\n      (unit? x)\n      (if (and (= (unit x) unit))\n        x\n        (convert x unit))\n\n      :else\n      (let [;; Does `.getName` even work in CLJS? -- @noprompt\n            ex-message (util/format \"Unable to convert from %s to %s\"\n                                    (.getName type)\n                                    (name unit))\n            ;; TODO: This needs to be populated with more helpful\n            ;; data.\n            ex-data {:given {:type type\n                             :unit unit}}]\n        (throw\n         (ex-info ex-message ex-data))))))\n\n(defn make-unit-adder\n  \"Create a addition function for adding Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)]\n    (fn u+\n      ([] (u 0))\n      ([x] (u x))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (+ m1 m2))))\n      ([x y & more]\n         (reduce u+ (u+ x y) more)))))\n\n(defn make-unit-subtractor\n  \"Create a subtraction function for subtracting Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)]\n    (fn u-\n      ([x] (u (- x)))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (- m1 m2))))\n      ([x y & more]\n         (reduce u- (u- x y) more)))))\n\n(defn make-unit-multiplier\n  \"Create a multiplication function for multiplying Units.\"\n  [unit]\n  (let [u  (make-unit-fn unit)\n        op (if (= unit :%)\n            (fn percent*\n              [x y]\n              (/ (* x y) 100))\n            *)]\n    (fn u*\n      ([] (u 1))\n      ([x] (u x))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (op m1 m2))))\n      ([x y & more]\n         (reduce u* (u* x y) more)))))\n\n(defn make-unit-divider\n  \"Create a division function for dividing Units.\"\n  [unit]\n  (let [u (make-unit-fn unit)\n        op (if (= unit :%)\n            (fn percent-div\n              [x y]\n              (* 100 (/ x y)))\n             /)]\n    (fn ud\n      ([x] (u (/ 1 x)))\n      ([x y]\n         (let [{m1 :magnitude} (u x)\n               {m2 :magnitude} (u y)]\n           (u (op m1 m2))))\n      ([x y & more]\n         (reduce ud (ud x y) more)))))\n\n#?(:clj\n   (defmacro defunit\n     \"Create a suite of functions for unit creation, conversion,\n  validation, and arithmetic.\"\n     ([name]\n      `(defunit ~name ~name))\n     ([name unit]\n      (let [k (keyword unit)\n            append #(symbol (str name %))]\n        `(do\n           (def ~name (make-unit-fn ~k))\n           (def ~(append \\?) (make-unit-predicate ~k))\n           (def ~(append \\+) (make-unit-adder ~k))\n           (def ~(append \\-) (make-unit-subtractor ~k))\n           (def ~(append \\*) (make-unit-multiplier ~k))\n           (def ~(append \"-div\") (make-unit-divider ~k)))))))\n\n(comment\n  ;; This:\n  (defunit px)\n  ;; Is equivalent to:\n  (def px  (make-unit-fn :px))\n  (def px? (make-unit-predicate :px))\n  (def px+ (make-unit-adder :px))\n  (def px- (make-unit-subtractor :px))\n  (def px* (make-unit-multiplier :px))\n  (def px-div (make-unit-divider :px)))\n\n;; # Predefined units\n\n;; Absolute units\n\n(defunit cm)\n(defunit mm)\n(defunit in)\n(defunit px)\n(defunit pt)\n(defunit pc)\n(defunit percent \"%\")\n\n;; Font-relative units\n\n(defunit em)\n(defunit ex)\n(defunit ch)\n(defunit rem)\n\n;; Viewport-percentage lengths\n\n(defunit vw)\n(defunit vh)\n(defunit vmin)\n(defunit vmax)\n\n;; Angles\n\n(defunit deg)\n(defunit grad)\n(defunit rad)\n(defunit turn)\n\n;; Times\n\n(defunit s)\n(defunit ms)\n\n;; Frequencies\n\n(defunit Hz)\n(defunit kHz)\n\n;; Resolutions\n\n(defunit dpi)\n(defunit dpcm)\n(defunit dppx)\n"]}