{"version":3,"sources":["shadow/xhr.cljs"],"mappings":"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","names":["shadow.xhr/result-chain","res","handler","goog.result/chain","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","shadow.xhr/result-combine","seq71741","self__4777__auto__","cljs.core/seq","results","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","goog.result/combine","shadow.xhr/result-wait-on-success","callback","goog.result/waitOnSuccess","shadow.xhr/result-success?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/goog.result.Result.State.SUCCESS","shadow.xhr/result-value","shadow.xhr/result-immediate","value","goog.result/successfulResult","shadow.xhr/result-error","goog.result/waitOnError","shadow.xhr/edn-transform","body","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.xhr/json-transform","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON","shadow.xhr/goog-keys","shadow.xhr/make-request-options","options","obj","seq__71745","chunk__71746","count__71747","i__71748","vec__71759","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__71763","cljs.core/first","cljs.core/next","k","v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","shadow.xhr/content-transforms","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","shadow.xhr/register-transform","content-type","transform-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","shadow.xhr/auto-transform","req","ct","clojure.string/lower-case","sep","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__71767","shadow.xhr/make-url","url","params","G__71768","G__71769","goog.uri.utils/appendParamsFromMap","shadow.xhr/transform-request-body","data","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shadow.xhr/as-url","input","cljs.core/vector?","cljs.core/map?","cljs.core/second","vec__71776","shadow.xhr/e->data","e","shadow.xhr/event-handler","events","event-type","c","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","shadow.xhr/request-ok?","status","shadow.xhr/request-error?","G__71815","shadow.xhr/chan","js/Error","p__71828","map__71829","cljs.core/hash-map","method","shadow.xhr.chan.cljs$core$IFn$_invoke$arity$4","upload","body-only","vec__71833","js/XMLHttpRequest","body?","result-chan","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","error-handler","temp__5733__auto__","transform","G__71846","G__71847","cljs.core/name","G__71849","shadow.xhr/request","shadow.xhr.request.cljs$core$IFn$_invoke$arity$4","cljs.core/contains?","vec__71852","G__71855","G__71856","G__71857","G__71858","goog.labs.net.xhr/send","cljs.core/assoc-in","js/goog.result.SimpleResult.fromPromise","goog.result/transform","shadow.xhr/upload","seq71871","G__71872","G__71874","self__4776__auto__","file","xhr","seq__71880","chunk__71882","count__71883","i__71884","vec__71898","vec__71905","ev-id","ev-handler","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","target","G__71912"],"sourcesContent":["(ns shadow.xhr\n  \"FIXME: rewrite to using promises, since closure is deprecating result\"\n  (:require [goog.result :as gresult]\n            goog.result.SimpleResult\n            [goog.labs.net.xhr :as gxhr]\n            [cljs.reader :as cr]\n            [goog.uri.utils :as gutils]\n            [goog.json :as gjson]\n            [shadow.object :as so]\n            [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [shadow.util :as util :refer (log)]\n            ))\n\n(defn result-chain [res handler]\n  (gresult/chain res handler))\n\n(defn result-combine [& results]\n  (apply gresult/combine results))\n\n(defn result-wait-on-success [res callback]\n  (gresult/waitOnSuccess res callback))\n\n(defn result-success? [res]\n  (= js/goog.result.Result.State.SUCCESS (.getState res)))\n\n(defn result-value [res]\n  (.getValue res))\n\n(defn result-immediate [value]\n  (gresult/successfulResult value))\n\n(defn result-error [res callback]\n  (gresult/waitOnError res callback))\n\n;; FIXME: this whole module is a mess ...\n\n(defn- edn-transform [body]\n  (cr/read-string body))\n\n(defn- json-transform [body]\n  (js->clj (.parse js/JSON body)))\n\n(def goog-keys {:timeout \"timeoutMs\"\n                :with-credentials \"withCredentials\"\n                :headers \"headers\"\n                :mime-type \"mimeType\"\n                })\n\n(defn make-request-options [options]\n  (let [obj (js-obj)]\n    (doseq [[k v] options]\n      (aset obj (get goog-keys k) (clj->js v)))\n    obj\n    ))\n\n(def content-transforms\n  (atom\n    {\"text/edn\" edn-transform\n     \"application/edn\" edn-transform\n     \"application/json\" json-transform\n     \"text/html\" identity\n     \"text/plain\" identity}))\n\n(defn register-transform [content-type transform-fn]\n  (swap! content-transforms assoc content-type transform-fn))\n\n(defn auto-transform [req]\n  (let [content-type (let [ct (str/lower-case (.getResponseHeader req \"Content-Type\"))\n                           sep (.indexOf ct \";\")]\n                       (if (not= -1 sep)\n                         (.substring ct 0 sep)\n                         ct))\n        transform-fn (get @content-transforms content-type)]\n    (if (nil? transform-fn)\n      (throw (ex-info \"unsupported content-type\" {:req req :content-type content-type}))\n      (transform-fn (.-responseText req)))))\n\n(defn make-url [url params]\n  (gutils/appendParamsFromMap url (clj->js params)))\n\n(defn transform-request-body [data]\n  (cond\n    (string? data)\n    [\"text/plain; charset=utf-8\" data]\n    (satisfies? IPrintWithWriter data)\n    [\"text/edn; charset=utf-8\" (pr-str data)]\n    :default\n    [\"application/octet-stream\" data]\n    ))\n\n(defn as-url [input]\n  (cond\n    (string? input)\n    input\n\n    (and (vector? input)\n         (= 2 (count input))\n         (string? (first input))\n         (map? (second input)))\n    (let [[url params] input]\n      (make-url url params))\n\n    :else\n    (throw (ex-info \"doesnt look like an url\" {:input input}))\n    ))\n\n(defn e->data [e]\n  e)\n\n(defn event-handler [req events event-type]\n  (fn [e]\n    (cond\n      (map? events)\n      (when-let [c (get events event-type)]\n        (async/put! c [req (e->data e)]))\n\n      (not (nil? events))\n      (async/put! events [event-type req (e->data e)])\n\n      :else\n      nil)))\n\n(defn request-ok? [status]\n  (= 200 status))\n\n(defn request-error? [status]\n  (>= status 400))\n\n(defn chan\n  \"creates a channel and performs xhr request like (chan :GET \\\"/something\\\")\n\n   accepts url as string or [url params]\n\n   this channel will receive one message [status body req] on load\n   loadend will close the result channel, so you will get nil results on request errors/timeouts\n\n   use options hash to pass in extra channels\n\n   (chan :POST \\\"/something\\\" some-data {:events chan-or-map\n                                         :upload chan-or-map})\n\n   when given a chan that channels receives messages in form of [event-type event-data req]\n   when given a map a channel is expected for each eventtype and will receive [event-data req]\n   {:timeout some-chan}, if no channel for a given event is present, no message is sent\n\n   event types are :loadstart :progress :abort :error :timeout :loadend :load (see xhr spec)\n   only exception is that status >= 500 does not return a result and produces an error event instead\"\n\n  ([method url]\n   (chan method url nil {}))\n  ([method url data]\n   (chan method url data {}))\n  ([method url data {:keys [events\n                            upload\n                            body-only]\n                     :as options}]\n   (let [req (js/XMLHttpRequest.)\n         body? (not= :GET method)\n         [content-type body] (if body?\n                               (transform-request-body data)\n                               [nil nil])\n         result-chan (async/chan 1)]\n\n     (when (and body? upload)\n       (dom/on (.-upload req) :loadstart (event-handler req upload :loadstart))\n       (dom/on (.-upload req) :progress (event-handler req upload :progress))\n       (dom/on (.-upload req) :abort (event-handler req upload :abort))\n       (dom/on (.-upload req) :error (event-handler req upload :error))\n       (dom/on (.-upload req) :timeout (event-handler req upload :timeout))\n       (dom/on (.-upload req) :loadend (event-handler req upload :loadend))\n       (dom/on (.-upload req) :load (event-handler req upload :loadend)))\n\n     (dom/on req :loadstart (event-handler req events :loadstart))\n     (dom/on req :progress (event-handler req events :progress))\n     (dom/on req :abort (event-handler req events :abort))\n     (dom/on req :timeout (event-handler req events :timeout))\n\n     (dom/on req :loadend (let [callback (event-handler req events :loadend)]\n                            (fn [e]\n                              (callback e)\n                              (async/close! result-chan))))\n\n     (let [error-handler (event-handler req events :error)]\n       (dom/on req :error error-handler)\n\n       (dom/on req :load (let [callback (event-handler req events :load)]\n                           (fn [e]\n                             (let [status (.-status req)\n                                   body\n                                   (if-let [transform (:transform options)]\n                                     (transform (.-responseText req) req)\n                                     (auto-transform req))]\n                               (if (request-error? status)\n                                 (error-handler e)\n                                 (do (callback e)\n                                     (if body-only\n                                       (async/put! result-chan body)\n                                       (async/put! result-chan [status body req])))))))))\n\n     (.open req (name method) (as-url url) true)\n\n     ;; must set after open\n     ;; FIXME: bad for CORS! but who uses http auth for anything serious?\n     (set! (.-responseType req) \"text\")\n     (set! (.-withCredentials req) (not (false? (:with-credentials options))))\n\n     (when body?\n       (.setRequestHeader req \"Content-Type\" content-type))\n\n     (if body?\n       (.send req body)\n       (.send req))\n\n     result-chan\n     )))\n\n(defn request\n  ([method url]\n   (request method url nil {}))\n  ([method url data]\n   (request method url data {}))\n  ([method url data options]\n   (when (and (not (contains? #{:GET :DELETE} method)) (nil? data))\n     (throw (ex-info \"request needs data\" {:method method :url url :data data :options options})))\n\n   (let [body? (not (or (= :GET method) (nil? data)))\n         [content-type body] (transform-request-body data)\n         req (gxhr/send (name method)\n               (if (and (= :GET method) data)\n                 (make-url url data)\n                 url)\n               (when body?\n                 body)\n               (make-request-options\n                 (if body?\n                   (assoc-in options [:headers \"Content-Type\"] content-type)\n                   options))\n               )\n         req (js/goog.result.SimpleResult.fromPromise req)\n         ]\n     (gresult/transform req auto-transform))))\n\n(defn upload [url file & events]\n  (let [xhr (js/XMLHttpRequest.)]\n    (doseq [[ev-id ev-handler] (partition 2 events)\n            :let [target (if (= :progress ev-id) (aget xhr \"upload\") xhr)]]\n      (.addEventListener target (name ev-id) ev-handler))\n    (doto xhr\n      (.open \"PUT\" url)\n      (.send file))))\n"]}